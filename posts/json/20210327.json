{
  "title": "ポリモーフィズム",
  "permalink": "javascript-polymorphism",
  "description": null,
  "created_at": "2021-03-27T00:00:00.000Z",
  "tags": "JavaScript",
  "bodyContent": "ポリモーフィズムとは異なる型のオブジェクトを同一視し、そのオブジェクトの型によって動作を切り替えることです。\n  \nポリモーフィズムは動的型付け言語ではダックタイピング、静的型付け言語ではインターフェースや抽象クラスで実現できます。\n\n# switchを使った条件分岐のコード\n\nswitchを使った手続き型の条件分岐のコードです。\n  \n異なる型のオブジェクトを用意しています。都道府県の東西南北の長さを求めます。\n\n```\nconst hokkaido = {\n  name: \"北海道\",\n  code: 1,\n  eastWestLength: 777.4,\n  northSouthLength: 467.3\n};\n\nconst aomori = {\n  name: \"青森県\",\n  code: 2\n};\n\nconst iwate = {\n  name: \"岩手県\",\n  code: 3,\n  eastWestLength: 121.6\n};\n\nfunction computeArea(pref) {\n  switch (pref.name) {\n    case \"北海道\":\n      return pref.eastWestLength + pref.northSouthLength;\n    case \"青森県\":\n      return 184.2 + 148.7;\n    case \"岩手県\":\n      return pref.eastWestLength + 189.2;\n    default:\n      throw new Error();\n  }\n}\n\nfor (const pref of [hokkaido, aomori, iwate]) {\n  console.log(computeArea(pref));\n}\n```\n\n# ダックタイピングによって条件分岐を消したコード\nオブジェクト自身に計算処理を持たせることにより、Switch文による条件分岐を消しています。\n\n```\nconst hokkaido = {\n  name: \"北海道\",\n  code: 1,\n  eastWestLength: 777.4,\n  northSouthLength: 467.3,\n  totalLength: function () {\n    return this.eastWestLength + this.northSouthLength;\n  }\n};\n\nconst aomori = {\n  name: \"青森県\",\n  code: 2,\n  totalLength: function () {\n    return 184.2 + 148.7;\n  }\n};\n\nconst iwate = {\n  name: \"岩手県\",\n  code: 3,\n  eastWestLength: 121.6,\n  totalLength: function () {\n    return this.eastWestLength + 189.2;\n  }\n};\n\nfor (const pref of [hokkaido, aomori, iwate]) {\n  console.log(pref.totalLength());\n}\n```\n\n# 参考\n- [ポリモーフィズムを活用するとなぜ if や switch が消えるのか？](https://qiita.com/Nossa/items/a93024e653ff939115c6)\n- [プログラマー１年生がポリモーフィズムについて学んだのでＲＰＧで説明する。](https://qiita.com/Nossa/items/b6e2f4ed0fa079359fc5)",
  "bodyHtml": "<p>ポリモーフィズムとは異なる型のオブジェクトを同一視し、そのオブジェクトの型によって動作を切り替えることです。</p>\n<p>ポリモーフィズムは動的型付け言語ではダックタイピング、静的型付け言語ではインターフェースや抽象クラスで実現できます。</p>\n<h1>switchを使った条件分岐のコード</h1>\n<p>switchを使った手続き型の条件分岐のコードです。</p>\n<p>異なる型のオブジェクトを用意しています。都道府県の東西南北の長さを求めます。</p>\n<pre><code>const hokkaido = {\n  name: &quot;北海道&quot;,\n  code: 1,\n  eastWestLength: 777.4,\n  northSouthLength: 467.3\n};\n\nconst aomori = {\n  name: &quot;青森県&quot;,\n  code: 2\n};\n\nconst iwate = {\n  name: &quot;岩手県&quot;,\n  code: 3,\n  eastWestLength: 121.6\n};\n\nfunction computeArea(pref) {\n  switch (pref.name) {\n    case &quot;北海道&quot;:\n      return pref.eastWestLength + pref.northSouthLength;\n    case &quot;青森県&quot;:\n      return 184.2 + 148.7;\n    case &quot;岩手県&quot;:\n      return pref.eastWestLength + 189.2;\n    default:\n      throw new Error();\n  }\n}\n\nfor (const pref of [hokkaido, aomori, iwate]) {\n  console.log(computeArea(pref));\n}\n</code></pre>\n<h1>ダックタイピングによって条件分岐を消したコード</h1>\n<p>オブジェクト自身に計算処理を持たせることにより、Switch文による条件分岐を消しています。</p>\n<pre><code>const hokkaido = {\n  name: &quot;北海道&quot;,\n  code: 1,\n  eastWestLength: 777.4,\n  northSouthLength: 467.3,\n  totalLength: function () {\n    return this.eastWestLength + this.northSouthLength;\n  }\n};\n\nconst aomori = {\n  name: &quot;青森県&quot;,\n  code: 2,\n  totalLength: function () {\n    return 184.2 + 148.7;\n  }\n};\n\nconst iwate = {\n  name: &quot;岩手県&quot;,\n  code: 3,\n  eastWestLength: 121.6,\n  totalLength: function () {\n    return this.eastWestLength + 189.2;\n  }\n};\n\nfor (const pref of [hokkaido, aomori, iwate]) {\n  console.log(pref.totalLength());\n}\n</code></pre>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://qiita.com/Nossa/items/a93024e653ff939115c6\">ポリモーフィズムを活用するとなぜ if や switch が消えるのか？</a></li>\n<li><a href=\"https://qiita.com/Nossa/items/b6e2f4ed0fa079359fc5\">プログラマー１年生がポリモーフィズムについて学んだのでＲＰＧで説明する。</a></li>\n</ul>\n",
  "dir": "posts/json",
  "base": "20210327.json",
  "ext": ".json",
  "sourceBase": "20210327.md",
  "sourceExt": ".md"
}