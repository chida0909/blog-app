{
  "title": "Vue.jsスタイルガイド深堀り 優先度B",
  "permalink": "vue-style-guide-b",
  "description": "このページはVue.jsスタイルガイドの要約ではなく、個人的に調べた内容を肉付けした記事です。",
  "created_at": "2020-04-07T00:00:00.000Z",
  "tags": "Vue",
  "bodyContent": "このページはVue.jsスタイルガイドの要約ではなく、個人的に調べた内容を肉付けした記事です。対象範囲は、単一ファイルコンポーネント（.vue）に対してです。  \n[スタイルガイド — Vue.js](https://jp.vuejs.org/v2/style-guide/index.html)  \n\nルールカテゴリは以下のように定められていますが、優先度Bについて書きます。\n\n| 優先度 | 内容 |\n| ---- | ---- |\n| A:必須 | エラー防止 |\n| B:強く推奨 | (読みやすさの向上 |\n| C:推奨 | 一貫性の確保 |\n| D:使用注意 | 潜在的な不具合の回避 |\n\n# 単一ファイルコンポーネントのファイル名の形式\n単一ファイルコンポーネントのファイル名は、すべてパスカルケースにするか、すべてケバブケースにするべきです。\n\n\n**悪い例**\n```\ncomponents/\n|- mycomponent.vue\n```\n\n```\ncomponents/\n|- myComponent.vue\n```\n\n**良い例**\n```\ncomponents/\n|- MyComponent.vue\n```\n\n```\ncomponents/\n|- my-component.vue\n```\n\n**補足**\n\nケバブケースでコンポーネント名を定義  \n参照する時：ケバブケースを使う\n  \nパスカルケースでコンポーネントを定義  \n参照する時：ケバブ、パスカルどちらのケースも使える  \nただし、HTMLに直接使用する場合には、ケバブケースの名前のみが有効になります。  \n参考：[コンポーネントの登録 — Vue.js](https://jp.vuejs.org/v2/guide/components-registration.html#命名のケース-Name-Casing)\n\n# 基底コンポーネントの名前\nBase、App、Vなどの固有のプレフィックスで始まるようにします。  \n\n**悪い例**\n\n```\ncomponents/\n|- MyButton.vue\n|- VueTable.vue\n|- Icon.vue\n```\n\n**良い例**\n```\ncomponents/\n|- BaseButton.vue\n|- BaseTable.vue\n|- BaseIcon.vue\n```\n\n**補足**\n基底コンポーネントとは、inputやbuttonのような要素をラップするためのコンポーネントのことです。\n参考：[コンポーネントの登録 — Vue.js](https://jp.vuejs.org/v2/guide/components-registration.html#基底コンポーネントの自動グローバル登録)\n\n# 単一インスタンスのコンポーネント名\nページごとに1回しか使われないは、Theというプレフィックスで始まるようにします。  \n\n**悪い例**\n```\ncomponents/\n|- Heading.vue\n|- MySidebar.vue\n```\n\n**良い例**\n```\ncomponents/\n|- TheHeading.vue\n|- TheSidebar.vue\n```\n\n# 密結合コンポーネントの名前\n親コンポーネントと密結合した子コンポーネントは、親コンポーネントの名前をプレフィックスとして含むようにします。\n\n**悪い例**\n```\ncomponents/\n|- TodoList.vue\n|- TodoItem.vue\n|- TodoButton.vue\n```\n\n**良い例**\n```\ncomponents/\n|- TodoList.vue\n|- TodoListItem.vue\n|- TodoListItemButton.vue\n```\n\n# コンポーネント名における単語の順番\nコンポーネント名は一般的な単語から始まり、説明的な修飾語で終わるようにします。\n\n**悪い例**\n```\ncomponents/\n|- ClearSearchButton.vue\n|- ExcludeFromSearchInput.vue\n|- LaunchOnStartupCheckbox.vue\n|- RunSearchButton.vue\n|- SearchInput.vue\n|- TermsCheckbox.vue\n```\n\n**良い例**\n```\ncomponents/\n|- SearchButtonClear.vue\n|- SearchButtonRun.vue\n|- SearchInputQuery.vue\n|- SearchInputExcludeGlob.vue\n|- SettingsCheckboxTerms.vue\n|- SettingsCheckboxLaunchOnStartup.vue\n```\n\n**補足**\n修飾語とは意味を詳しくしたりする語で、「白い花」「とても疲れた」の「白い」「とても」の部分を指します。\n\n# 自己終了形式のコンポーネント\n単一ファイルコンポーネントの中では自己終了形式で書きます。\n\n**悪い例**\n```\n<MyComponent></MyComponent>\n```\n\n**良い例**\n```\n<MyComponent/>\n```\n\n**補足**\n公式のスタイルガイドに出てくる「DOMテンプレートの中」とは、HTMLファイルのHTMLタグ内のことを指します。HTMLはカスタム要素の自己終了形式を許していません。\n\n# テンプレート内でのコンポーネント名の形式\n単一ファイルコンポーネントのカスタムタグは、常にパスカルケースにします。\n\n**悪い例**\n```\n<mycomponent/>\n<myComponent/>\n```\n\n**良い例**\n```\n<MyComponent/>\n```\n\n# JS/JSX 内でのコンポーネント名の形式\nJS/JSX内でのコンポーネント名は、常にパスカルケースにします。\n\n**悪い例**\n```\nimport myComponent from './MyComponent.vue'\nexport default {\n  name: 'myComponent',\n  // ...\n}\n```\n\n**良い例**\n```\nimport MyComponent from './MyComponent.vue'\nexport default {\n  name: 'MyComponent',\n  // ...\n}\n```\n\n# 完全な単語によるコンポーネント名\nコンポーネント名には、略語よりも完全な単語を使います。\n\n**悪い例**\n```\ncomponents/\n|- SdSettings.vue\n|- UProfOpts.vue\n```\n\n**良い例**\n```\ncomponents/\n|- StudentDashboardSettings.vue\n|- UserProfileOptions.vue\n```\n\n# プロパティ名の型式\nプロパティ名は、定義の時はキャメルケース、HTMLで使う際はケバブケースにします。\n\n**悪い例**\n```\nprops: {\n  'greeting-text': String\n}\n\n<WelcomeMessage greetingText=\"hi\"/>\n```\n\n**良い例**\n```\nprops: {\n  greetingText: String\n}\n\n<WelcomeMessage greeting-text=\"hi\"/>\n```\n\n# 複数の属性をもつ要素\n複数の属性をもつ要素は、1行に1要素ずつ、複数の行に書きます。元々JavaScriptでの慣習で、Vueでも同じように考えられています。\n\n**悪い例**\n```\n<img src=\"https://vuejs.org/images/logo.png\" alt=\"Vue Logo\">\n<MyComponent foo=\"a\" bar=\"b\" baz=\"c\"/>\n```\n\n**良い例**\n```\n<img\n  src=\"https://vuejs.org/images/logo.png\"\n  alt=\"Vue Logo\"\n>\n<MyComponent\n  foo=\"a\"\n  bar=\"b\"\n  baz=\"c\"\n/>\n```\n\n# テンプレート内での単純な式\nコンポーネントのテンプレートには単純な式だけを含むようにします。\n\n**悪い例**\n```\n{{\n  fullName.split(' ').map(function (word) {\n    return word[0].toUpperCase() + word.slice(1)\n  }).join(' ')\n}}\n```\n\n**良い例**\n```\n<!-- テンプレート内 -->\n{{ normalizedFullName }}\n\n// 複雑な式を算出プロパティに移動\ncomputed: {\n  normalizedFullName: function () {\n    return this.fullName.split(' ').map(function (word) {\n      return word[0].toUpperCase() + word.slice(1)\n    }).join(' ')\n  }\n}\n```\n\n# 単純な算出プロパティ\n複雑な算出プロパティは、できる限りたくさんの単純なプロパティに分割します。\n\n**悪い例**\n```\ncomputed: {\n  price: function () {\n    var basePrice = this.manufactureCost / (1 - this.profitMargin)\n    return (\n      basePrice -\n      basePrice * (this.discountPercent || 0)\n    )\n  }\n}\n```\n\n**良い例**\n```\ncomputed: {\n  basePrice: function () {\n    return this.manufactureCost / (1 - this.profitMargin)\n  },\n  discount: function () {\n    return this.basePrice * (this.discountPercent || 0)\n  },\n  finalPrice: function () {\n    return this.basePrice - this.discount\n  }\n}\n```\n\n# 引用符付きの属性値\n空ではないHTML属性の値は常に引用符で括ります。\n\n**悪い例**\n```\n<input type=text>\n<AppSidebar :style={width:sidebarWidth+'px'}>\n```\n\n**良い例**\n```\n<input type=\"text\">\n<AppSidebar :style=\"{ width: sidebarWidth + 'px' }\">\n```\n\n# ディレクティブの短縮記法\nディレクティブの短縮記法は、常に使うか、まったく使わないかのどちらかにします。\n\n**悪い例**\n```\n<input\n  v-bind:value=\"newTodoText\"\n  :placeholder=\"newTodoInstructions\"\n>\n```\n\n**良い例**\n```\n<input\n  :value=\"newTodoText\"\n  :placeholder=\"newTodoInstructions\"\n>\n```",
  "bodyHtml": "<p>このページはVue.jsスタイルガイドの要約ではなく、個人的に調べた内容を肉付けした記事です。対象範囲は、単一ファイルコンポーネント（.vue）に対してです。<br>\n<a href=\"https://jp.vuejs.org/v2/style-guide/index.html\">スタイルガイド — Vue.js</a></p>\n<p>ルールカテゴリは以下のように定められていますが、優先度Bについて書きます。</p>\n<table>\n<thead>\n<tr>\n<th>優先度</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A:必須</td>\n<td>エラー防止</td>\n</tr>\n<tr>\n<td>B:強く推奨</td>\n<td>(読みやすさの向上</td>\n</tr>\n<tr>\n<td>C:推奨</td>\n<td>一貫性の確保</td>\n</tr>\n<tr>\n<td>D:使用注意</td>\n<td>潜在的な不具合の回避</td>\n</tr>\n</tbody>\n</table>\n<h1>単一ファイルコンポーネントのファイル名の形式</h1>\n<p>単一ファイルコンポーネントのファイル名は、すべてパスカルケースにするか、すべてケバブケースにするべきです。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>components/\n|- mycomponent.vue\n</code></pre>\n<pre><code>components/\n|- myComponent.vue\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>components/\n|- MyComponent.vue\n</code></pre>\n<pre><code>components/\n|- my-component.vue\n</code></pre>\n<p><strong>補足</strong></p>\n<p>ケバブケースでコンポーネント名を定義<br>\n参照する時：ケバブケースを使う</p>\n<p>パスカルケースでコンポーネントを定義<br>\n参照する時：ケバブ、パスカルどちらのケースも使える<br>\nただし、HTMLに直接使用する場合には、ケバブケースの名前のみが有効になります。<br>\n参考：<a href=\"https://jp.vuejs.org/v2/guide/components-registration.html#%E5%91%BD%E5%90%8D%E3%81%AE%E3%82%B1%E3%83%BC%E3%82%B9-Name-Casing\">コンポーネントの登録 — Vue.js</a></p>\n<h1>基底コンポーネントの名前</h1>\n<p>Base、App、Vなどの固有のプレフィックスで始まるようにします。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>components/\n|- MyButton.vue\n|- VueTable.vue\n|- Icon.vue\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>components/\n|- BaseButton.vue\n|- BaseTable.vue\n|- BaseIcon.vue\n</code></pre>\n<p><strong>補足</strong>\n基底コンポーネントとは、inputやbuttonのような要素をラップするためのコンポーネントのことです。\n参考：<a href=\"https://jp.vuejs.org/v2/guide/components-registration.html#%E5%9F%BA%E5%BA%95%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E8%87%AA%E5%8B%95%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E7%99%BB%E9%8C%B2\">コンポーネントの登録 — Vue.js</a></p>\n<h1>単一インスタンスのコンポーネント名</h1>\n<p>ページごとに1回しか使われないは、Theというプレフィックスで始まるようにします。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>components/\n|- Heading.vue\n|- MySidebar.vue\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>components/\n|- TheHeading.vue\n|- TheSidebar.vue\n</code></pre>\n<h1>密結合コンポーネントの名前</h1>\n<p>親コンポーネントと密結合した子コンポーネントは、親コンポーネントの名前をプレフィックスとして含むようにします。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>components/\n|- TodoList.vue\n|- TodoItem.vue\n|- TodoButton.vue\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>components/\n|- TodoList.vue\n|- TodoListItem.vue\n|- TodoListItemButton.vue\n</code></pre>\n<h1>コンポーネント名における単語の順番</h1>\n<p>コンポーネント名は一般的な単語から始まり、説明的な修飾語で終わるようにします。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>components/\n|- ClearSearchButton.vue\n|- ExcludeFromSearchInput.vue\n|- LaunchOnStartupCheckbox.vue\n|- RunSearchButton.vue\n|- SearchInput.vue\n|- TermsCheckbox.vue\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>components/\n|- SearchButtonClear.vue\n|- SearchButtonRun.vue\n|- SearchInputQuery.vue\n|- SearchInputExcludeGlob.vue\n|- SettingsCheckboxTerms.vue\n|- SettingsCheckboxLaunchOnStartup.vue\n</code></pre>\n<p><strong>補足</strong>\n修飾語とは意味を詳しくしたりする語で、「白い花」「とても疲れた」の「白い」「とても」の部分を指します。</p>\n<h1>自己終了形式のコンポーネント</h1>\n<p>単一ファイルコンポーネントの中では自己終了形式で書きます。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>&lt;MyComponent&gt;&lt;/MyComponent&gt;\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>&lt;MyComponent/&gt;\n</code></pre>\n<p><strong>補足</strong>\n公式のスタイルガイドに出てくる「DOMテンプレートの中」とは、HTMLファイルのHTMLタグ内のことを指します。HTMLはカスタム要素の自己終了形式を許していません。</p>\n<h1>テンプレート内でのコンポーネント名の形式</h1>\n<p>単一ファイルコンポーネントのカスタムタグは、常にパスカルケースにします。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>&lt;mycomponent/&gt;\n&lt;myComponent/&gt;\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>&lt;MyComponent/&gt;\n</code></pre>\n<h1>JS/JSX 内でのコンポーネント名の形式</h1>\n<p>JS/JSX内でのコンポーネント名は、常にパスカルケースにします。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>import myComponent from './MyComponent.vue'\nexport default {\n  name: 'myComponent',\n  // ...\n}\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>import MyComponent from './MyComponent.vue'\nexport default {\n  name: 'MyComponent',\n  // ...\n}\n</code></pre>\n<h1>完全な単語によるコンポーネント名</h1>\n<p>コンポーネント名には、略語よりも完全な単語を使います。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>components/\n|- SdSettings.vue\n|- UProfOpts.vue\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>components/\n|- StudentDashboardSettings.vue\n|- UserProfileOptions.vue\n</code></pre>\n<h1>プロパティ名の型式</h1>\n<p>プロパティ名は、定義の時はキャメルケース、HTMLで使う際はケバブケースにします。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>props: {\n  'greeting-text': String\n}\n\n&lt;WelcomeMessage greetingText=&quot;hi&quot;/&gt;\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>props: {\n  greetingText: String\n}\n\n&lt;WelcomeMessage greeting-text=&quot;hi&quot;/&gt;\n</code></pre>\n<h1>複数の属性をもつ要素</h1>\n<p>複数の属性をもつ要素は、1行に1要素ずつ、複数の行に書きます。元々JavaScriptでの慣習で、Vueでも同じように考えられています。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>&lt;img src=&quot;https://vuejs.org/images/logo.png&quot; alt=&quot;Vue Logo&quot;&gt;\n&lt;MyComponent foo=&quot;a&quot; bar=&quot;b&quot; baz=&quot;c&quot;/&gt;\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>&lt;img\n  src=&quot;https://vuejs.org/images/logo.png&quot;\n  alt=&quot;Vue Logo&quot;\n&gt;\n&lt;MyComponent\n  foo=&quot;a&quot;\n  bar=&quot;b&quot;\n  baz=&quot;c&quot;\n/&gt;\n</code></pre>\n<h1>テンプレート内での単純な式</h1>\n<p>コンポーネントのテンプレートには単純な式だけを含むようにします。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>{{\n  fullName.split(' ').map(function (word) {\n    return word[0].toUpperCase() + word.slice(1)\n  }).join(' ')\n}}\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>&lt;!-- テンプレート内 --&gt;\n{{ normalizedFullName }}\n\n// 複雑な式を算出プロパティに移動\ncomputed: {\n  normalizedFullName: function () {\n    return this.fullName.split(' ').map(function (word) {\n      return word[0].toUpperCase() + word.slice(1)\n    }).join(' ')\n  }\n}\n</code></pre>\n<h1>単純な算出プロパティ</h1>\n<p>複雑な算出プロパティは、できる限りたくさんの単純なプロパティに分割します。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>computed: {\n  price: function () {\n    var basePrice = this.manufactureCost / (1 - this.profitMargin)\n    return (\n      basePrice -\n      basePrice * (this.discountPercent || 0)\n    )\n  }\n}\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>computed: {\n  basePrice: function () {\n    return this.manufactureCost / (1 - this.profitMargin)\n  },\n  discount: function () {\n    return this.basePrice * (this.discountPercent || 0)\n  },\n  finalPrice: function () {\n    return this.basePrice - this.discount\n  }\n}\n</code></pre>\n<h1>引用符付きの属性値</h1>\n<p>空ではないHTML属性の値は常に引用符で括ります。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>&lt;input type=text&gt;\n&lt;AppSidebar :style={width:sidebarWidth+'px'}&gt;\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>&lt;input type=&quot;text&quot;&gt;\n&lt;AppSidebar :style=&quot;{ width: sidebarWidth + 'px' }&quot;&gt;\n</code></pre>\n<h1>ディレクティブの短縮記法</h1>\n<p>ディレクティブの短縮記法は、常に使うか、まったく使わないかのどちらかにします。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>&lt;input\n  v-bind:value=&quot;newTodoText&quot;\n  :placeholder=&quot;newTodoInstructions&quot;\n&gt;\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>&lt;input\n  :value=&quot;newTodoText&quot;\n  :placeholder=&quot;newTodoInstructions&quot;\n&gt;\n</code></pre>\n",
  "dir": "posts/json",
  "base": "20200407.json",
  "ext": ".json",
  "sourceBase": "20200407.md",
  "sourceExt": ".md"
}