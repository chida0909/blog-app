{
  "title": "Vue.jsのスタイルガイドまとめ",
  "permalink": "vue-style-guide",
  "description": null,
  "created_at": "2020-04-06T00:00:00.000Z",
  "tags": "Vue",
  "bodyContent": "このページはVue.jsスタイルガイドの要約と、分かりにくい部分に対し深堀りしました。記事の対象範囲は、単一ファイルコンポーネント（.vue）に対してです。  \n[スタイルガイド — Vue.js](https://jp.vuejs.org/v2/style-guide/index.html)  \n\n# ルールカテゴリ\n\n| 優先度 | 内容 |\n| ---- | ---- |\n| A:必須 | エラー防止 |\n| B:強く推奨 | 読みやすさ向上 |\n| C:推奨 | 一貫性の確保 |\n| D:使用注意 | 潜在的な不具合の回避 |\n\n# A:必須\n\n## 【複数単語コンポーネント名】\nコンポーネント名は常に複数単語にします。全てのHTML要素は1単語のため、HTML要素との衝突を防止します。  \n\n**悪い例**  \n```\nexport default {\n  name: 'Todo',\n  // ...\n}\n```\n\n**良い例**  \n```\nexport default {\n  name: 'TodoItem',\n  // ...\n}\n```\n\n## 【コンポーネントのデータ】\nコンポーネントのdataは、オブジェクトを返す関数でなければなりません。  \n\n**悪い例**  \n```\nexport default {\n  data: {\n    foo: 'bar'\n  }\n}\n```\n\n**良い例**  \n```\nexport default {\n  data () {\n    return {\n      foo: 'bar'\n    }\n  }\n}\n```\n\n**補足**  \ndataの値がオブジェクトの時、コンポーネントの全てのインスタンスで共有されるため、他のインスタンスのdataの値を書き換えてしまいます。\n\n## 【プロパティの定義】\nプロパティの定義はできる限り詳しく書きます。\n\n**悪い例**  \n```\nprops: ['status']\n```\n\n**良い例**  \n```\nprops: {\n  status: String\n}\n```\n\n**補足**  \n上記の例の場合、statusにString以外の型が渡されると、ディベロッパーツールのConsoleに警告を出して知らせてくれます。  \n\n以下のようにプロパティの定義を複数設定することもできます。\n```\nprops: {\n  status: {\n    type: String,\n    default: '',\n    required: true\n  }\n}\n```\n\n更にvalidatorを設定することができます。次の例では、配列statusの各文字数が10文字以下か否かのチェックをしています。everyメソッドを使うことで全ての値が10文字以上だった場合、trueを返すようにしています。\n```\nprops: {\n  status: {\n    type: Array,\n    required: true,\n    validator (arrayValue) {\n      return arrayValue.every( v => v.length <= 10 )\n    }\n  }\n}\n```\n\n## 【キー付き v-for】\nkeyは仮想DOMの差分から実際のDOMに反映させるときに、最小限の変更するために使われます。差分算出のため、描画のパフォーマンスの向上に繋がります。  \n参考：[API — Vue.js](https://jp.vuejs.org/v2/api/#key)  \n\n\n**悪い例**  \n```\n<ul>\n  <li v-for=\"todo in todos\">\n    {{ todo.text }}\n  </li>\n</ul>\n```\n\n**良い例**  \n```\n<ul>\n  <li\n    v-for=\"todo in todos\"\n    :key=\"todo.id\"\n  >\n    {{ todo.text }}\n  </li>\n</ul>\n```\n\n**補足**  \nDOMの内容が単純な場合や、要素の追加や削除がない場合に限り、keyを使わなくても問題はないようです。  \n参考：[リストレンダリング — Vue.js](https://jp.vuejs.org/v2/guide/list.html#状態の維持)  \n  \n&#13;&#10;\n  \n※v-forでkey属性にindexを使って良いのか問題  \n  \n&#13;&#10;\n  \nv-forで第2引数を指定すると、配列インデックスを受け取れます。  \n```\n<ul>\n  <li\n    v-for=\"(todo, index) in todos\"\n    :key=\"index\"\n  >\n    {{ todo.text }}\n  </li>\n</ul>\n```\n  \n&#13;&#10;\n  \n配列インデックスをkeyに指定するのは、結論NGです。要素の追加や削除があった場合、インデックスは振り直されるため、付与されていたインデックスが変わってしまいます。インデックスが変わると不具合を起こしかねません。  \n  \n&#13;&#10;\n  \n「インデックスが振り直される」のイメージを持っていただくため [サンプルページ](https://chida.blog/sample/keytest) を作成しました。ページ内ではユーザー名を並べています。id: usernameの形式で10名いますが、ボタンをクリックするとユーザーが削除され、keyが振り直されていることが確認できます。見た目上は削除できていますが、データ上「id = username」の関係にならないため、ユーザーの特定が不可になります（同姓同名が存在していたら、どれが正しいか判別できません）\n  \n&#13;&#10;\n  \nつまり、一意のidが振れない場合は、無理してインデックスは使うことはないです。ちなみにkeyを指定しない場合は、配列インデックスと同じ扱いになります。  \n  \n&#13;&#10;\n  \n参考：[Vue.js: v-forで項目インデックスをkey属性にしていいのか](https://qiita.com/FumioNonaka/items/d1d9c9335116426a8316)  \n  \n&#13;&#10;\n  \n※中途半端になったため、また改めて更新します。",
  "bodyHtml": "<p>このページはVue.jsスタイルガイドの要約と、分かりにくい部分に対し深堀りしました。記事の対象範囲は、単一ファイルコンポーネント（.vue）に対してです。<br>\n<a href=\"https://jp.vuejs.org/v2/style-guide/index.html\">スタイルガイド — Vue.js</a></p>\n<h1>ルールカテゴリ</h1>\n<table>\n<thead>\n<tr>\n<th>優先度</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A:必須</td>\n<td>エラー防止</td>\n</tr>\n<tr>\n<td>B:強く推奨</td>\n<td>読みやすさ向上</td>\n</tr>\n<tr>\n<td>C:推奨</td>\n<td>一貫性の確保</td>\n</tr>\n<tr>\n<td>D:使用注意</td>\n<td>潜在的な不具合の回避</td>\n</tr>\n</tbody>\n</table>\n<h1>A:必須</h1>\n<h2>【複数単語コンポーネント名】</h2>\n<p>コンポーネント名は常に複数単語にします。全てのHTML要素は1単語のため、HTML要素との衝突を防止します。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>export default {\n  name: 'Todo',\n  // ...\n}\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>export default {\n  name: 'TodoItem',\n  // ...\n}\n</code></pre>\n<h2>【コンポーネントのデータ】</h2>\n<p>コンポーネントのdataは、オブジェクトを返す関数でなければなりません。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>export default {\n  data: {\n    foo: 'bar'\n  }\n}\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>export default {\n  data () {\n    return {\n      foo: 'bar'\n    }\n  }\n}\n</code></pre>\n<p><strong>補足</strong><br>\ndataの値がオブジェクトの時、コンポーネントの全てのインスタンスで共有されるため、他のインスタンスのdataの値を書き換えてしまいます。</p>\n<h2>【プロパティの定義】</h2>\n<p>プロパティの定義はできる限り詳しく書きます。</p>\n<p><strong>悪い例</strong></p>\n<pre><code>props: ['status']\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>props: {\n  status: String\n}\n</code></pre>\n<p><strong>補足</strong><br>\n上記の例の場合、statusにString以外の型が渡されると、ディベロッパーツールのConsoleに警告を出して知らせてくれます。</p>\n<p>以下のようにプロパティの定義を複数設定することもできます。</p>\n<pre><code>props: {\n  status: {\n    type: String,\n    default: '',\n    required: true\n  }\n}\n</code></pre>\n<p>更にvalidatorを設定することができます。次の例では、配列statusの各文字数が10文字以下か否かのチェックをしています。everyメソッドを使うことで全ての値が10文字以上だった場合、trueを返すようにしています。</p>\n<pre><code>props: {\n  status: {\n    type: Array,\n    required: true,\n    validator (arrayValue) {\n      return arrayValue.every( v =&gt; v.length &lt;= 10 )\n    }\n  }\n}\n</code></pre>\n<h2>【キー付き v-for】</h2>\n<p>keyは仮想DOMの差分から実際のDOMに反映させるときに、最小限の変更するために使われます。差分算出のため、描画のパフォーマンスの向上に繋がります。<br>\n参考：<a href=\"https://jp.vuejs.org/v2/api/#key\">API — Vue.js</a></p>\n<p><strong>悪い例</strong></p>\n<pre><code>&lt;ul&gt;\n  &lt;li v-for=&quot;todo in todos&quot;&gt;\n    {{ todo.text }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p><strong>良い例</strong></p>\n<pre><code>&lt;ul&gt;\n  &lt;li\n    v-for=&quot;todo in todos&quot;\n    :key=&quot;todo.id&quot;\n  &gt;\n    {{ todo.text }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p><strong>補足</strong><br>\nDOMの内容が単純な場合や、要素の追加や削除がない場合に限り、keyを使わなくても問題はないようです。<br>\n参考：<a href=\"https://jp.vuejs.org/v2/guide/list.html#%E7%8A%B6%E6%85%8B%E3%81%AE%E7%B6%AD%E6%8C%81\">リストレンダリング — Vue.js</a></p>\n<p>\r\n</p>\n<p>※v-forでkey属性にindexを使って良いのか問題</p>\n<p>\r\n</p>\n<p>v-forで第2引数を指定すると、配列インデックスを受け取れます。</p>\n<pre><code>&lt;ul&gt;\n  &lt;li\n    v-for=&quot;(todo, index) in todos&quot;\n    :key=&quot;index&quot;\n  &gt;\n    {{ todo.text }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>\r\n</p>\n<p>配列インデックスをkeyに指定するのは、結論NGです。要素の追加や削除があった場合、インデックスは振り直されるため、付与されていたインデックスが変わってしまいます。インデックスが変わると不具合を起こしかねません。</p>\n<p>\r\n</p>\n<p>「インデックスが振り直される」のイメージを持っていただくため <a href=\"https://chida.blog/sample/keytest\">サンプルページ</a> を作成しました。ページ内ではユーザー名を並べています。id: usernameの形式で10名いますが、ボタンをクリックするとユーザーが削除され、keyが振り直されていることが確認できます。見た目上は削除できていますが、データ上「id = username」の関係にならないため、ユーザーの特定が不可になります（同姓同名が存在していたら、どれが正しいか判別できません）</p>\n<p>\r\n</p>\n<p>つまり、一意のidが振れない場合は、無理してインデックスは使うことはないです。ちなみにkeyを指定しない場合は、配列インデックスと同じ扱いになります。</p>\n<p>\r\n</p>\n<p>参考：<a href=\"https://qiita.com/FumioNonaka/items/d1d9c9335116426a8316\">Vue.js: v-forで項目インデックスをkey属性にしていいのか</a></p>\n<p>\r\n</p>\n<p>※中途半端になったため、また改めて更新します。</p>\n",
  "dir": "posts/json",
  "base": "20200406.json",
  "ext": ".json",
  "sourceBase": "20200406.md",
  "sourceExt": ".md"
}