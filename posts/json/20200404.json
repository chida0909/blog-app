{
  "title": "JavaScriptの配列処理について",
  "permalink": "js-array-processing",
  "description": "配列操作について何気なく使っていたので整理しました。",
  "created_at": "2020-04-04T00:00:00.000Z",
  "tags": "JavaScript",
  "bodyContent": "## for\nfor文は繰り返す範囲を指定した反復処理を書くことができます。変数宣言がletなのは、変数名iが反復処理の度にインクリメントされるためです。\n\n```js\nlet total = 0;\nfor (let i = 0; i < 10; i++) {\n    total += i + 1;\n}\nconsole.log(total); // 55\n```\n\n## for..in\nオブジェクトに含まれるプロパティを順に取り出す時に使用します。\n\n```js\nconst object = {\n  a: 1,\n  b: 2,\n  c: 3\n}\nfor (const key in object) {\n  console.log(key) // a b c\n  console.log(object[key]) // 1 2 3\n```\n\nfor..inは配列には使うと予期せぬ挙動を起こします。更に数値ではなく文字列として生成されるため、加算する際は文字列の結合となります。配列を操作したい場合は後述するfor..ofを使います。  \n```js\nconst numbers = [5, 10]\nfor (const num in numbers) {\n  console.log(num) // \"1\" \"0\"\n  console.log(typeof num) // string string\n}\n```\n\n参考：[ループと反復処理·JavaScript Primer #jsprimer](https://jsprimer.net/basic/loop/#for-in-statement)\n\n## for..of\n配列の値を順に取り出す時に使用します。\n\n```js\nconst array = [1, 2, 3]\nfor (const value of array) {\n  console.log(value) // 1 2 3\n}\n```\n  \nfor文と違い、for..inやfor..ofの変数宣言がconstである理由  \nループのたびに別々のスコープとなるため、毎回同じ名前で定義できます。for文の変数宣言で使われる変数が++の場合は、反復処理の度にインクリメントされるためletになります。\n  \n参考：[letとconstについて >> ループと反復処理](https://github.com/asciidwango/js-primer/issues/567)\n\n## forEach\n\nArray.forEachには返り値はない（undefined）ため、返り値が不要な時に使います。\n```js\nconst array = [0, 1, 2, 3]\narray.forEach(e => console.log(e)) // 0 1 2 3\n```\n  \n&#13;&#10;\n  \nこのArray.forEachの処理は冗長です。\n```js\nconst array = [0, 1, 2, 3]\nconst result = [];\narray.forEach(e => result.push(e * 2));\nconsole.log(result); // [0, 2, 4, 6]\n```\n\n返り値が必要な場合は、Array.mapで代替できます。\n```js\nconst array = [0, 1, 2, 3];\nconst result = array.map(e => e * 2);\nconsole.log(result); // [0, 2, 4, 6]\n```\n  \n&#13;&#10;\n  \nこのArray.forEachの処理は冗長です。\n```js\nconst array = [0, 1, 2, 3]\nconst result = [];\narray.forEach(e => {\n  if (e % 2 === 0) {\n    result.push(e);\n  }\n});\nconsole.log(result); // [0, 2]\n```\n\nArray.filterで代替できます。\n```js\nconst array = [0, 1, 2, 3]\nconst result = array.filter(e => e % 2 === 0);\nconsole.log(result); // [0, 2]\n```\n  \n&#13;&#10;\n  \nこのArray.forEachの処理は冗長です。\n```js\nconst array = [0, 1, 2, 3];\nlet total = 0;\narray.forEach(e => {\n  total += e;\n});\nconsole.log(total); // 6\n```\nArray.reduceで代替できます。\n```js\nconst array = [0, 1, 2, 3];\nconst result = array.reduce((accumulator, currentValue) => {\n  return accumulator + currentValue;\n});\nconsole.log(result); // 6\n```\n\n## map\n\n返り値が必要な時にmapを使います。\n\n```js\nconst array = [1, 2, 3]\nconst result = array.map(e => e * 2)\nconsole.log(result) // [ 2, 4, 6 ]\n```\n\n## filter\n\n全ての要素に対して関数を一度ずつ実行し、戻り値でtrueを返した要素からなる新しい配列を生成します。\n\n```js\nconst array = [1, 2, 3, 4]\nconst result = array.filter(e => (e % 2) === 0)\nconsole.log(result) // [ 2, 4 ]\n```\n\n## find\n\nfilterと同じような処理をしますが、最初にtrueを返した要素1つだけを返します。\nES6からの対応なのでIEでは使えません。\n\n```js\nconst array = [1, 2, 3, 4]\nconst result = array.find(e => e > 2)\nconsole.log(result) // 3\n```\n\n## reduce\n\nreduceは配列内の値に対して実行される関数で4つの引数を持ちます。例えば、配列内の値の合計値を求める時などに使います。  \n\naccumulator：現在処理されている要素よりも一つ前の要素  \ncurrentValue：現在処理されている要素  \ncurrentIndex：現在処理されている要素のインデックス  \narray：対象となる配列  \n\n配列内の値の合計を求める場合は、以下の通りです。  \n\n```js\nconst array = [1, 2, 3, 4]\nconst result = array.reduce((accumulator, currentValue, currentIndex, array) => {\n    return accumulator + currentValue\n})\nconsole.log(result) // 10\n```\n\nreduceの動きは以下のようになっています。  \n\n| callback | accumulator | currentValue | currentIndex | array |\n| ---- | ---- | ---- | ---- | ---- |\n| 初回 | 1 | 2 | 1 | [1, 2, 3, 4] |\n| 2回目 | 3 | 3 | 2 | [1, 2, 3, 4] |\n| 3回目 | 6 | 4 | 3 | [1, 2, 3, 4] |\n\n他にも二次元配列を一次元配列にしたり、スプレッド演算子とinitialValueを使ってオブジェクトの配列に含まれる配列を結合させたり出来ます。\n\n### 二次元配列を一次元配列に\n\n```js\nconst numbersTmp = [[\"\", \"\", \"\"], [1, 2, 3]]\nconst numbers = numbersTmp.reduce((accumulator, current) => {\n  accumulator.push(...current)\n  return accumulator\n}, [])\nconsole.log(numbers) // [\"\", \"\", \"\", 1, 2, 3]\n```\n\n### オブジェクトの配列に含まれる配列を結合\n\n```js\nlet friends = [\n  {\n    name: \"Anna\",\n    books: [\"Bible\", \"Harry Potter\"],\n    age: 21\n  },\n  {\n    name: \"Bob\",\n    books: [\"War and peace\", \"Romeo and Juliet\"],\n    age: 26\n  },\n  {\n    name: \"Alice\",\n    books: [\"The Lord of the Rings\", \"The Shining\"],\n    age: 18\n  }\n]\n\nlet allbooks = friends.reduce(\n  (accumulator, currentValue) => [...accumulator, ...currentValue.books],\n  []\n)\n\nconsole.log(allbooks) // [\"Bible\", \"Harry Potter\", \"War and peace\", \"Romeo and Juliet\", \"The Lord of the Rings\", \"The Shining\"]\n```\n\n## some\n条件を一つでも満たす場合にtrueを返します。\n\n```js\nconst array = [1, 2, 3, 4]\nconst result = array.some(e => e > 2)\nconsole.log(result) // true\n```\n\n## every\n条件をすべて満たす場合にtrueを返します。\n\n```js\nconst array = [1, 2, 3, 4]\nconst result = array.every(e => e < 5)\nconsole.log(result) // true\n```",
  "bodyHtml": "<h2>for</h2>\n<p>for文は繰り返す範囲を指定した反復処理を書くことができます。変数宣言がletなのは、変数名iが反復処理の度にインクリメントされるためです。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n    total += i + <span class=\"hljs-number\">1</span>;\n}\n<span class=\"hljs-built_in\">console</span>.log(total); <span class=\"hljs-comment\">// 55</span></code></pre><h2>for..in</h2>\n<p>オブジェクトに含まれるプロパティを順に取り出す時に使用します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> object = {\n  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span>\n}\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> object) {\n  <span class=\"hljs-built_in\">console</span>.log(key) <span class=\"hljs-comment\">// a b c</span>\n  <span class=\"hljs-built_in\">console</span>.log(object[key]) <span class=\"hljs-comment\">// 1 2 3</span></code></pre><p>for..inは配列には使うと予期せぬ挙動を起こします。更に数値ではなく文字列として生成されるため、加算する際は文字列の結合となります。配列を操作したい場合は後述するfor..ofを使います。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> numbers = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>]\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> num <span class=\"hljs-keyword\">in</span> numbers) {\n  <span class=\"hljs-built_in\">console</span>.log(num) <span class=\"hljs-comment\">// \"1\" \"0\"</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> num) <span class=\"hljs-comment\">// string string</span>\n}</code></pre><p>参考：<a href=\"https://jsprimer.net/basic/loop/#for-in-statement\">ループと反復処理·JavaScript Primer #jsprimer</a></p>\n<h2>for..of</h2>\n<p>配列の値を順に取り出す時に使用します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> array) {\n  <span class=\"hljs-built_in\">console</span>.log(value) <span class=\"hljs-comment\">// 1 2 3</span>\n}</code></pre><p>for文と違い、for..inやfor..ofの変数宣言がconstである理由<br>\nループのたびに別々のスコープとなるため、毎回同じ名前で定義できます。for文の変数宣言で使われる変数が++の場合は、反復処理の度にインクリメントされるためletになります。</p>\n<p>参考：<a href=\"https://github.com/asciidwango/js-primer/issues/567\">letとconstについて &gt;&gt; ループと反復処理</a></p>\n<h2>forEach</h2>\n<p>Array.forEachには返り値はない（undefined）ため、返り値が不要な時に使います。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\narray.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(e)) <span class=\"hljs-comment\">// 0 1 2 3</span></code></pre><p>\r\n</p>\n<p>このArray.forEachの処理は冗長です。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">const</span> result = [];\narray.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> result.push(e * <span class=\"hljs-number\">2</span>));\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// [0, 2, 4, 6]</span></code></pre><p>返り値が必要な場合は、Array.mapで代替できます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> result = array.map(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e * <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// [0, 2, 4, 6]</span></code></pre><p>\r\n</p>\n<p>このArray.forEachの処理は冗長です。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">const</span> result = [];\narray.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (e % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>) {\n    result.push(e);\n  }\n});\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// [0, 2]</span></code></pre><p>Array.filterで代替できます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">const</span> result = array.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// [0, 2]</span></code></pre><p>\r\n</p>\n<p>このArray.forEachの処理は冗長です。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">0</span>;\narray.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> {\n  total += e;\n});\n<span class=\"hljs-built_in\">console</span>.log(total); <span class=\"hljs-comment\">// 6</span></code></pre><p>Array.reduceで代替できます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">const</span> result = array.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, currentValue</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> accumulator + currentValue;\n});\n<span class=\"hljs-built_in\">console</span>.log(result); <span class=\"hljs-comment\">// 6</span></code></pre><h2>map</h2>\n<p>返り値が必要な時にmapを使います。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">const</span> result = array.map(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e * <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-built_in\">console</span>.log(result) <span class=\"hljs-comment\">// [ 2, 4, 6 ]</span></code></pre><h2>filter</h2>\n<p>全ての要素に対して関数を一度ずつ実行し、戻り値でtrueを返した要素からなる新しい配列を生成します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-keyword\">const</span> result = array.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> (e % <span class=\"hljs-number\">2</span>) === <span class=\"hljs-number\">0</span>)\n<span class=\"hljs-built_in\">console</span>.log(result) <span class=\"hljs-comment\">// [ 2, 4 ]</span></code></pre><h2>find</h2>\n<p>filterと同じような処理をしますが、最初にtrueを返した要素1つだけを返します。\nES6からの対応なのでIEでは使えません。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-keyword\">const</span> result = array.find(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e &gt; <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-built_in\">console</span>.log(result) <span class=\"hljs-comment\">// 3</span></code></pre><h2>reduce</h2>\n<p>reduceは配列内の値に対して実行される関数で4つの引数を持ちます。例えば、配列内の値の合計値を求める時などに使います。</p>\n<p>accumulator：現在処理されている要素よりも一つ前の要素<br>\ncurrentValue：現在処理されている要素<br>\ncurrentIndex：現在処理されている要素のインデックス<br>\narray：対象となる配列</p>\n<p>配列内の値の合計を求める場合は、以下の通りです。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-keyword\">const</span> result = array.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, currentValue, currentIndex, array</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> accumulator + currentValue\n})\n<span class=\"hljs-built_in\">console</span>.log(result) <span class=\"hljs-comment\">// 10</span></code></pre><p>reduceの動きは以下のようになっています。</p>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初回</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>[1, 2, 3, 4]</td>\n</tr>\n<tr>\n<td>2回目</td>\n<td>3</td>\n<td>3</td>\n<td>2</td>\n<td>[1, 2, 3, 4]</td>\n</tr>\n<tr>\n<td>3回目</td>\n<td>6</td>\n<td>4</td>\n<td>3</td>\n<td>[1, 2, 3, 4]</td>\n</tr>\n</tbody>\n</table>\n<p>他にも二次元配列を一次元配列にしたり、スプレッド演算子とinitialValueを使ってオブジェクトの配列に含まれる配列を結合させたり出来ます。</p>\n<h3>二次元配列を一次元配列に</h3>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> numbersTmp = [[<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"\"</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]]\n<span class=\"hljs-keyword\">const</span> numbers = numbersTmp.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, current</span>) =&gt;</span> {\n  accumulator.push(...current)\n  <span class=\"hljs-keyword\">return</span> accumulator\n}, [])\n<span class=\"hljs-built_in\">console</span>.log(numbers) <span class=\"hljs-comment\">// [\"\", \"\", \"\", 1, 2, 3]</span></code></pre><h3>オブジェクトの配列に含まれる配列を結合</h3>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">let</span> friends = [\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Anna\"</span>,\n    <span class=\"hljs-attr\">books</span>: [<span class=\"hljs-string\">\"Bible\"</span>, <span class=\"hljs-string\">\"Harry Potter\"</span>],\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">21</span>\n  },\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Bob\"</span>,\n    <span class=\"hljs-attr\">books</span>: [<span class=\"hljs-string\">\"War and peace\"</span>, <span class=\"hljs-string\">\"Romeo and Juliet\"</span>],\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">26</span>\n  },\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Alice\"</span>,\n    <span class=\"hljs-attr\">books</span>: [<span class=\"hljs-string\">\"The Lord of the Rings\"</span>, <span class=\"hljs-string\">\"The Shining\"</span>],\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>\n  }\n]\n\n<span class=\"hljs-keyword\">let</span> allbooks = friends.reduce(\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, currentValue</span>) =&gt;</span> [...accumulator, ...currentValue.books],\n  []\n)\n\n<span class=\"hljs-built_in\">console</span>.log(allbooks) <span class=\"hljs-comment\">// [\"Bible\", \"Harry Potter\", \"War and peace\", \"Romeo and Juliet\", \"The Lord of the Rings\", \"The Shining\"]</span></code></pre><h2>some</h2>\n<p>条件を一つでも満たす場合にtrueを返します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-keyword\">const</span> result = array.some(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e &gt; <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-built_in\">console</span>.log(result) <span class=\"hljs-comment\">// true</span></code></pre><h2>every</h2>\n<p>条件をすべて満たす場合にtrueを返します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-keyword\">const</span> result = array.every(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e &lt; <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-built_in\">console</span>.log(result) <span class=\"hljs-comment\">// true</span></code></pre>",
  "dir": "posts/json",
  "base": "20200404.json",
  "ext": ".json",
  "sourceBase": "20200404.md",
  "sourceExt": ".md"
}