{
  "title": "JavaScriptの配列処理について",
  "permalink": "js-array-processing",
  "description": "配列操作について何気なく使っていたので整理しました。",
  "created_at": "2020-04-04T00:00:00.000Z",
  "tags": "JavaScript",
  "bodyContent": "forEachやmap、filterは理解していますが、他の便利な配列操作について何気なく使っていたので整理しました。\n\n## forEach\n\nforEachには返り値はない（undefined）ため、返り値が不要な時に使います。\n\n```\nconst array = [1, 2, 3]\narray.forEach(e => console.log(e)) // 1 2 3\n```\n\n[Array.prototype.forEach() - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n\n## map\n\n返り値が必要な時にmapを使います。\n\n```\nconst array = [1, 2, 3]\nconst result = array.map(e => e * 2)\nconsole.log(result) // [ 2, 4, 6 ]\n```\n\n[Array.prototype.map() - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\n## filter\n\n全ての要素に対して関数を一度ずつ実行し、戻り値でtrueを返した要素からなる新しい配列を生成します。\n\n```\nconst array = [1, 2, 3, 4]\nconst result = array.filter(e => (e % 2) === 0)\nconsole.log(result) // [ 2, 4 ]\n```\n\n[Array.prototype.filter() - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n\n## find\n\nfilterと同じような処理をしますが、最初にtrueを返した要素1つだけを返します。\nES6からの対応なのでIEでは使えません。\n\n```\nconst array = [1, 2, 3, 4]\nconst result = array.find(e => e > 2)\nconsole.log(result) // 3\n```\n\n[Array.prototype.find() - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n\n\n## reduce\n\nreduceは配列内の値に対して実行される関数で4つの引数を持ちます。例えば、配列内の値の合計値を求める時などに使います。  \n\naccumulator：現在処理されている要素よりも一つ前の要素  \ncurrentValue：現在処理されている要素  \ncurrentIndex：現在処理されている要素のインデックス  \narray：対象となる配列  \n\n配列内の値の合計を求める場合は、以下の通りです。  \n\n```\nconst array = [1, 2, 3, 4]\nconst result = array.reduce((accumulator, currentValue, currentIndex, array) => {\n    return accumulator + currentValue\n})\nconsole.log(result) // 10\n```\n\nreduceの動きは以下のようになっています。  \n\n| callback | accumulator | currentValue | currentIndex | array |\n| ---- | ---- | ---- | ---- | ---- |\n| 初回 | 1 | 2 | 1 | [1, 2, 3, 4] |\n| 2回目 | 3 | 3 | 2 | [1, 2, 3, 4] |\n| 3回目 | 6 | 4 | 3 | [1, 2, 3, 4] |\n\n他にも二次元配列を一次元配列にしたり、スプレッド演算子とinitialValueを使ってオブジェクトの配列に含まれる配列を結合させたり出来ます。\n\n### 二次元配列を一次元配列に\n\n```js\nconst numbersTmp = [[\"\", \"\", \"\"], [1, 2, 3]]\nconst numbers = numbersTmp.reduce((accumulator, current) => {\n  accumulator.push(...current)\n  return accumulator\n}, [])\nconsole.log(numbers) // [\"\", \"\", \"\", 1, 2, 3]\n```\n\n### オブジェクトの配列に含まれる配列を結合\n\n```js\nlet friends = [\n  {\n    name: \"Anna\",\n    books: [\"Bible\", \"Harry Potter\"],\n    age: 21\n  },\n  {\n    name: \"Bob\",\n    books: [\"War and peace\", \"Romeo and Juliet\"],\n    age: 26\n  },\n  {\n    name: \"Alice\",\n    books: [\"The Lord of the Rings\", \"The Shining\"],\n    age: 18\n  }\n]\n\nlet allbooks = friends.reduce(\n  (accumulator, currentValue) => [...accumulator, ...currentValue.books],\n  []\n)\n\nconsole.log(allbooks) // [\"Bible\", \"Harry Potter\", \"War and peace\", \"Romeo and Juliet\", \"The Lord of the Rings\", \"The Shining\"]\n```\n\n\n[Array.prototype.reduce() - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n\n## some\n条件を一つでも満たす場合にtrueを返します。\n\n```\nconst array = [1, 2, 3, 4]\nconst result = array.some(e => e > 2)\nconsole.log(result) // true\n```\n\n[Array.prototype.some() - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n\n## every\n条件をすべて満たす場合にtrueを返します。\n\n```\nconst array = [1, 2, 3, 4]\nconst result = array.every(e => e < 5)\nconsole.log(result) // true\n```\n\n[Array.prototype.every() - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/every)",
  "bodyHtml": "<p>forEachやmap、filterは理解していますが、他の便利な配列操作について何気なく使っていたので整理しました。</p>\n<h2>forEach</h2>\n<p>forEachには返り値はない（undefined）ため、返り値が不要な時に使います。</p>\n<pre><code>const array = [1, 2, 3]\narray.forEach(e =&gt; console.log(e)) // 1 2 3\n</code></pre>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">Array.prototype.forEach() - JavaScript | MDN</a></p>\n<h2>map</h2>\n<p>返り値が必要な時にmapを使います。</p>\n<pre><code>const array = [1, 2, 3]\nconst result = array.map(e =&gt; e * 2)\nconsole.log(result) // [ 2, 4, 6 ]\n</code></pre>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array.prototype.map() - JavaScript | MDN</a></p>\n<h2>filter</h2>\n<p>全ての要素に対して関数を一度ずつ実行し、戻り値でtrueを返した要素からなる新しい配列を生成します。</p>\n<pre><code>const array = [1, 2, 3, 4]\nconst result = array.filter(e =&gt; (e % 2) === 0)\nconsole.log(result) // [ 2, 4 ]\n</code></pre>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">Array.prototype.filter() - JavaScript | MDN</a></p>\n<h2>find</h2>\n<p>filterと同じような処理をしますが、最初にtrueを返した要素1つだけを返します。\nES6からの対応なのでIEでは使えません。</p>\n<pre><code>const array = [1, 2, 3, 4]\nconst result = array.find(e =&gt; e &gt; 2)\nconsole.log(result) // 3\n</code></pre>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/find\">Array.prototype.find() - JavaScript | MDN</a></p>\n<h2>reduce</h2>\n<p>reduceは配列内の値に対して実行される関数で4つの引数を持ちます。例えば、配列内の値の合計値を求める時などに使います。</p>\n<p>accumulator：現在処理されている要素よりも一つ前の要素<br>\ncurrentValue：現在処理されている要素<br>\ncurrentIndex：現在処理されている要素のインデックス<br>\narray：対象となる配列</p>\n<p>配列内の値の合計を求める場合は、以下の通りです。</p>\n<pre><code>const array = [1, 2, 3, 4]\nconst result = array.reduce((accumulator, currentValue, currentIndex, array) =&gt; {\n    return accumulator + currentValue\n})\nconsole.log(result) // 10\n</code></pre>\n<p>reduceの動きは以下のようになっています。</p>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>accumulator</th>\n<th>currentValue</th>\n<th>currentIndex</th>\n<th>array</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初回</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>[1, 2, 3, 4]</td>\n</tr>\n<tr>\n<td>2回目</td>\n<td>3</td>\n<td>3</td>\n<td>2</td>\n<td>[1, 2, 3, 4]</td>\n</tr>\n<tr>\n<td>3回目</td>\n<td>6</td>\n<td>4</td>\n<td>3</td>\n<td>[1, 2, 3, 4]</td>\n</tr>\n</tbody>\n</table>\n<p>他にも二次元配列を一次元配列にしたり、スプレッド演算子とinitialValueを使ってオブジェクトの配列に含まれる配列を結合させたり出来ます。</p>\n<h3>二次元配列を一次元配列に</h3>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> numbersTmp = [[<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"\"</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]]\n<span class=\"hljs-keyword\">const</span> numbers = numbersTmp.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, current</span>) =&gt;</span> {\n  accumulator.push(...current)\n  <span class=\"hljs-keyword\">return</span> accumulator\n}, [])\n<span class=\"hljs-built_in\">console</span>.log(numbers) <span class=\"hljs-comment\">// [\"\", \"\", \"\", 1, 2, 3]</span></code></pre><h3>オブジェクトの配列に含まれる配列を結合</h3>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">let</span> friends = [\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Anna\"</span>,\n    <span class=\"hljs-attr\">books</span>: [<span class=\"hljs-string\">\"Bible\"</span>, <span class=\"hljs-string\">\"Harry Potter\"</span>],\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">21</span>\n  },\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Bob\"</span>,\n    <span class=\"hljs-attr\">books</span>: [<span class=\"hljs-string\">\"War and peace\"</span>, <span class=\"hljs-string\">\"Romeo and Juliet\"</span>],\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">26</span>\n  },\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Alice\"</span>,\n    <span class=\"hljs-attr\">books</span>: [<span class=\"hljs-string\">\"The Lord of the Rings\"</span>, <span class=\"hljs-string\">\"The Shining\"</span>],\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>\n  }\n]\n\n<span class=\"hljs-keyword\">let</span> allbooks = friends.reduce(\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, currentValue</span>) =&gt;</span> [...accumulator, ...currentValue.books],\n  []\n)\n\n<span class=\"hljs-built_in\">console</span>.log(allbooks) <span class=\"hljs-comment\">// [\"Bible\", \"Harry Potter\", \"War and peace\", \"Romeo and Juliet\", \"The Lord of the Rings\", \"The Shining\"]</span></code></pre><p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">Array.prototype.reduce() - JavaScript | MDN</a></p>\n<h2>some</h2>\n<p>条件を一つでも満たす場合にtrueを返します。</p>\n<pre><code>const array = [1, 2, 3, 4]\nconst result = array.some(e =&gt; e &gt; 2)\nconsole.log(result) // true\n</code></pre>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/some\">Array.prototype.some() - JavaScript | MDN</a></p>\n<h2>every</h2>\n<p>条件をすべて満たす場合にtrueを返します。</p>\n<pre><code>const array = [1, 2, 3, 4]\nconst result = array.every(e =&gt; e &lt; 5)\nconsole.log(result) // true\n</code></pre>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/every\">Array.prototype.every() - JavaScript | MDN</a></p>\n",
  "dir": "posts/json",
  "base": "20200404.json",
  "ext": ".json",
  "sourceBase": "20200404.md",
  "sourceExt": ".md"
}