{
  "title": "TypeScriptのコードを書いて学習する",
  "permalink": "typescript-code",
  "description": null,
  "created_at": "2020-04-25T00:00:00.000Z",
  "tags": "TypeScript",
  "bodyContent": "TypeScriptは、静的型付けプログラミング言語です。つまり、型定義できるJavaScriptです。型を予め決めることで、コンパイル時にエラーを検知できます。\n\n# 型注釈(Type Annotation)\n型注釈とは、以下のように型を明示することを言います。型注釈にて静的型付を行うことで、コンパイラが整合性をチェックし、適合しているかどうかを検査してくれます。\n```ts\nconst hoge1: string = \"hoge\"\n```\n\n# プリミティブ型(基本型)\n\n- 真偽値（Boolean）\n- Null\n- Undefined\n- 数値（Number）\n- 文字列（String）\n- Symbol\n\n```ts\nconst hoge1: string = \"hoge\"\nconst hoge2: number = 1\nconst hoge3: boolean = false\n```\n\n## 型推論\n変数宣言の際にデータ型を指定せずに初期値を代入した場合は、型推論により型が決まります。\n\n```ts\nconst hoge = \"hoge\"\nconsole.log(typeof hoge) // string\n```\n\n## リテラル型\n特定の文字列や数値のみ許可します。\n\n```ts\nconst hoge1: \"fuga\" = \"fuga\"\nconst hoge2: 1 = 1\nconst hoge3: 1 = 5 // エラー\n```\n\n# オブジェクト(複合型)\n\n- Object\n- 配列\n- 関数\n- 正規表現\n- Date など\n\n## Object型\nObject型（{}型）は、undefinedとnull以外は何でも受け入れてしまう弱い型です。\n\n```ts\nconst hoge1: Object = 1\nconst hoge2: Object = \"hoge\"\nconst hoge3: Object = [1, 2]\n```\n\n### interface\ninterfaceは、TypeScript独自の構文です。Objectの型を作成する時に使います。\n\n```ts\ninterface Hoge {\n  foo: number\n  bar: number\n}\nconst fuga: Hoge = {\n  foo: 0,\n  bar: 1\n}\nconsole.log(fuga)\n```\n\n## object\nobject型は、先ほどのObject型（{}型）と別の挙動をします。undefinedとnullはもちろん、文字列や数値もエラーになります。\n\n```ts\nconst hoge1: object = () => {}\nconst hoge2: object = []\nconst hoge3: object = {}\n```\n\n## 配列型\n```ts\nconst hoge1: number[] = [1, 2]\n```\n\n# void型\nvoidはundefinedを扱う時に使います。関数の返り値を何も返さない場合にも使用します。\n```ts\nconst hoge: void = undefined\n```\n\n## 関数型\n\n```ts\nconst hoge = (x: string): string => {\n  return x + x\n}\nconsole.log(hoge(\"fuga\")) // fugafuga\n```\n\n戻り値が無い関数の場合、voidを指定します。\n```ts\nfunction shout(s: string): void {\n  console.log(s) // hoge\n}\nshout(\"hoge\")\n```\n\n```ts\nconst hoge = (x: string): string => {\n  return x + x\n}\nconsole.log(hoge(\"fuga\")) // fugafuga\n```\n\n# any型\nanyはどんな値でも代入可能にします。実質TypeScriptの型システムを無視することに相当します。\n```ts\nconst hoge: any = 1\nconst fuga: string = hoge\n```\n\n# タプル型\n要素の個数・型が決められた配列を表現しますJavaScriptには、タプルはありません。\n```ts\nconst hoge: [string, number]\nhoge = [\"hello\", 10]\n```\n\n# ユニオン型\nunionは和訳すると結合という意味です。指定したいずれかの型として振る舞います。\n```ts\nlet hoge: number | string\nlet hoge = 1\nlet hoge = \"hoge\"\n```\n\n# 列挙型(enum)\nenumは、Enumeration(イニュメレーション)を略した言葉です。JavaScriptには列挙型はありません。\n```ts\nenum Color {\n  Red,\n  Green,\n  Blue\n}\nconst hoge: Color = Color.Green\nconsole.log(hoge) // 1\n```\n\n```ts\nenum Color {\n  Red = 10,\n  Green,\n  Blue\n}\nconst hoge: Color = Color.Green\nconsole.log(hoge) // 11\n```\n  \n参考：[Enums - TypeScript Deep Dive 日本語版](https://typescript-jp.gitbook.io/deep-dive/type-system/enums)\n\n# 型アサーション(as)\n型アサーションを利用すると、任意の型に変換できます。型アサーションは2種類の書き方がありますが「値 as 変換したい型」での記述が推奨されます。\n  \n<変換したい型>値\n  \n```ts\nconst hoge: any = \"this is a string\"\nconst hogeLength: number = (<string>hoge).length\n```\n  \n値 as 変換したい型\n  \n```ts\nconst hoge: any = \"this is a string\"\nconst hogeLength: number = hoge.length as number\n```\n\n# ジェネリック\nジェネリックは、ジェネリクスや総称型とも呼ばれています。\n\n配列\n```ts\nconst hoge2 Array<number> = [1, 2]\n```\n  \n関数\n```ts\nfunction hoge<T>(value: T): T {\n  return value\n}\nconsole.log(hoge<string>(\"Hello\"))\n```\n  \n引数を複数持たせる\n```ts\nfunction hoge<T, U>(t: T, u: U){\n\tconsole.log(t)\n\tconsole.log(u)\n}\nhoge<string, number>(\"Hello\", 100)\n```\n  \nアロー関数\n```ts\nconst hoge = <T>(x: T): T => x\nhoge<string>(\"Hello\")\n```\n\n## type\ntypeキーワードを使い型のエイリアスを作成できます。\n\n```js\ntype LocalData = {\n  nav: HTMLElement | null // アンカーリンクコンテナ（フローティング対象）\n  upperTrigger: HTMLElement | null // フローティング判定上側トリガ（代替余白付与対象）\n  lowerTrigger: HTMLElement | null // フローティング判定下側トリガ\n}\n\nexport default Vue.extend({\n  data(): LocalData {\n    const nav = null\n    const upperTrigger = null\n    const lowerTrigger = null\n  }\n})\n```",
  "bodyHtml": "<p>TypeScriptは、静的型付けプログラミング言語です。つまり、型定義できるJavaScriptです。型を予め決めることで、コンパイル時にエラーを検知できます。</p>\n<h1>型注釈(Type Annotation)</h1>\n<p>型注釈とは、以下のように型を明示することを言います。型注釈にて静的型付を行うことで、コンパイラが整合性をチェックし、適合しているかどうかを検査してくれます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge1: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"hoge\"</span></code></pre><h1>プリミティブ型(基本型)</h1>\n<ul>\n<li>真偽値（Boolean）</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>数値（Number）</li>\n<li>文字列（String）</li>\n<li>Symbol</li>\n</ul>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge1: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"hoge\"</span>\n<span class=\"hljs-keyword\">const</span> hoge2: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">const</span> hoge3: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">false</span></code></pre><h2>型推論</h2>\n<p>変数宣言の際にデータ型を指定せずに初期値を代入した場合は、型推論により型が決まります。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge = <span class=\"hljs-string\">\"hoge\"</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> hoge) <span class=\"hljs-comment\">// string</span></code></pre><h2>リテラル型</h2>\n<p>特定の文字列や数値のみ許可します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge1: <span class=\"hljs-string\">\"fuga\"</span> = <span class=\"hljs-string\">\"fuga\"</span>\n<span class=\"hljs-keyword\">const</span> hoge2: <span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">const</span> hoge3: <span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">// エラー</span></code></pre><h1>オブジェクト(複合型)</h1>\n<ul>\n<li>Object</li>\n<li>配列</li>\n<li>関数</li>\n<li>正規表現</li>\n<li>Date など</li>\n</ul>\n<h2>Object型</h2>\n<p>Object型（{}型）は、undefinedとnull以外は何でも受け入れてしまう弱い型です。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge1: <span class=\"hljs-built_in\">Object</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">const</span> hoge2: <span class=\"hljs-built_in\">Object</span> = <span class=\"hljs-string\">\"hoge\"</span>\n<span class=\"hljs-keyword\">const</span> hoge3: <span class=\"hljs-built_in\">Object</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]</code></pre><h3>interface</h3>\n<p>interfaceは、TypeScript独自の構文です。Objectの型を作成する時に使います。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">interface</span> Hoge {\n  foo: <span class=\"hljs-built_in\">number</span>\n  bar: <span class=\"hljs-built_in\">number</span>\n}\n<span class=\"hljs-keyword\">const</span> fuga: Hoge = {\n  foo: <span class=\"hljs-number\">0</span>,\n  bar: <span class=\"hljs-number\">1</span>\n}\n<span class=\"hljs-built_in\">console</span>.log(fuga)</code></pre><h2>object</h2>\n<p>object型は、先ほどのObject型（{}型）と別の挙動をします。undefinedとnullはもちろん、文字列や数値もエラーになります。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge1: object = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {}\n<span class=\"hljs-keyword\">const</span> hoge2: object = []\n<span class=\"hljs-keyword\">const</span> hoge3: object = {}</code></pre><h2>配列型</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge1: <span class=\"hljs-built_in\">number</span>[] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]</code></pre><h1>void型</h1>\n<p>voidはundefinedを扱う時に使います。関数の返り値を何も返さない場合にも使用します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge: <span class=\"hljs-built_in\">void</span> = <span class=\"hljs-literal\">undefined</span></code></pre><h2>関数型</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge = (x: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">string</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> x + x\n}\n<span class=\"hljs-built_in\">console</span>.log(hoge(<span class=\"hljs-string\">\"fuga\"</span>)) <span class=\"hljs-comment\">// fugafuga</span></code></pre><p>戻り値が無い関数の場合、voidを指定します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shout</span>(<span class=\"hljs-params\">s: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">void</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(s) <span class=\"hljs-comment\">// hoge</span>\n}\nshout(<span class=\"hljs-string\">\"hoge\"</span>)</code></pre><pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge = (x: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">string</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> x + x\n}\n<span class=\"hljs-built_in\">console</span>.log(hoge(<span class=\"hljs-string\">\"fuga\"</span>)) <span class=\"hljs-comment\">// fugafuga</span></code></pre><h1>any型</h1>\n<p>anyはどんな値でも代入可能にします。実質TypeScriptの型システムを無視することに相当します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">const</span> fuga: <span class=\"hljs-built_in\">string</span> = hoge</code></pre><h1>タプル型</h1>\n<p>要素の個数・型が決められた配列を表現しますJavaScriptには、タプルはありません。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge: [<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">number</span>]\nhoge = [<span class=\"hljs-string\">\"hello\"</span>, <span class=\"hljs-number\">10</span>]</code></pre><h1>ユニオン型</h1>\n<p>unionは和訳すると結合という意味です。指定したいずれかの型として振る舞います。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">let</span> hoge: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">string</span>\n<span class=\"hljs-keyword\">let</span> hoge = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> hoge = <span class=\"hljs-string\">\"hoge\"</span></code></pre><h1>列挙型(enum)</h1>\n<p>enumは、Enumeration(イニュメレーション)を略した言葉です。JavaScriptには列挙型はありません。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">enum</span> Color {\n  Red,\n  Green,\n  Blue\n}\n<span class=\"hljs-keyword\">const</span> hoge: Color = Color.Green\n<span class=\"hljs-built_in\">console</span>.log(hoge) <span class=\"hljs-comment\">// 1</span></code></pre><pre><code class=\"hljs\"><span class=\"hljs-keyword\">enum</span> Color {\n  Red = <span class=\"hljs-number\">10</span>,\n  Green,\n  Blue\n}\n<span class=\"hljs-keyword\">const</span> hoge: Color = Color.Green\n<span class=\"hljs-built_in\">console</span>.log(hoge) <span class=\"hljs-comment\">// 11</span></code></pre><p>参考：<a href=\"https://typescript-jp.gitbook.io/deep-dive/type-system/enums\">Enums - TypeScript Deep Dive 日本語版</a></p>\n<h1>型アサーション(as)</h1>\n<p>型アサーションを利用すると、任意の型に変換できます。型アサーションは2種類の書き方がありますが「値 as 変換したい型」での記述が推奨されます。</p>\n<p>&lt;変換したい型&gt;値</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-string\">\"this is a string\"</span>\n<span class=\"hljs-keyword\">const</span> hogeLength: <span class=\"hljs-built_in\">number</span> = (&lt;<span class=\"hljs-built_in\">string</span>&gt;hoge).length</code></pre><p>値 as 変換したい型</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge: <span class=\"hljs-built_in\">any</span> = <span class=\"hljs-string\">\"this is a string\"</span>\n<span class=\"hljs-keyword\">const</span> hogeLength: <span class=\"hljs-built_in\">number</span> = hoge.length <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">number</span></code></pre><h1>ジェネリック</h1>\n<p>ジェネリックは、ジェネリクスや総称型とも呼ばれています。</p>\n<p>配列</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge2 <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">number</span>&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]</code></pre><p>関数</p>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hoge</span>&lt;<span class=\"hljs-title\">T</span>&gt;(<span class=\"hljs-params\">value: T</span>): <span class=\"hljs-title\">T</span> </span>{\n  <span class=\"hljs-keyword\">return</span> value\n}\n<span class=\"hljs-built_in\">console</span>.log(hoge&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">\"Hello\"</span>))</code></pre><p>引数を複数持たせる</p>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hoge</span>&lt;<span class=\"hljs-title\">T</span>, <span class=\"hljs-title\">U</span>&gt;(<span class=\"hljs-params\">t: T, u: U</span>)</span>{\n\t<span class=\"hljs-built_in\">console</span>.log(t)\n\t<span class=\"hljs-built_in\">console</span>.log(u)\n}\nhoge&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">number</span>&gt;(<span class=\"hljs-string\">\"Hello\"</span>, <span class=\"hljs-number\">100</span>)</code></pre><p>アロー関数</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge = &lt;T&gt;(x: T): <span class=\"hljs-function\"><span class=\"hljs-params\">T</span> =&gt;</span> x\nhoge&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">\"Hello\"</span>)</code></pre><h2>type</h2>\n<p>typeキーワードを使い型のエイリアスを作成できます。</p>\n<pre><code class=\"hljs\">type LocalData = {\n  <span class=\"hljs-attr\">nav</span>: HTMLElement | <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// アンカーリンクコンテナ（フローティング対象）</span>\n  <span class=\"hljs-attr\">upperTrigger</span>: HTMLElement | <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// フローティング判定上側トリガ（代替余白付与対象）</span>\n  <span class=\"hljs-attr\">lowerTrigger</span>: HTMLElement | <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// フローティング判定下側トリガ</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Vue.extend({\n  data(): LocalData {\n    <span class=\"hljs-keyword\">const</span> nav = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">const</span> upperTrigger = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">const</span> lowerTrigger = <span class=\"hljs-literal\">null</span>\n  }\n})</code></pre>",
  "dir": "posts/json",
  "base": "20200425.json",
  "ext": ".json",
  "sourceBase": "20200425.md",
  "sourceExt": ".md"
}