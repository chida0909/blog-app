{
  "title": "TypeScriptのコードを書いて学習する",
  "permalink": "typescript-code",
  "description": null,
  "created_at": "2020-04-25T00:00:00.000Z",
  "tags": "TypeScript",
  "bodyContent": "TypeScriptは、静的型付けプログラミング言語。つまり、型定義できるJavaScriptです。型を予め決めておくことで、コンパイル時にエラーを検知させることができます\n\n# プリミティブ型（基本型）\n\n- 真偽値（Boolean）\n- Null\n- Undefined\n- 数値（Number）\n- 文字列（String）\n- Symbol\n\n```ts\nconst hoge1: string = \"hoge\"\nconst hoge2: number = 1\nconst hoge3: boolean = false\n```\n\nvoidはundefinedを扱う時に使います。主な用途は、関数の返り値を何も返さない時に明示します。\n```ts\nconst hoge: void = undefined\n```\n\n\n## 型推論\n変数宣言の際にデータ型指定せずに初期値を代入した場合は、型推論により方が決まります。\n\n```ts\nconst hoge = \"hoge\"\nconsole.log(typeof hoge) // string\n```\n\n## リテラル型\n特定の文字列や数値のみ許可します。\n\n```ts\nconst hoge1: \"fuga\" = \"fuga\"\nconst hoge2: 1 = 1\nconst hoge3: 1 = 5 // エラー\n```\n\n# オブジェクト（複合型）\n\n- Object\n- 配列\n- 関数\n- 正規表現\n- Date\nなど\n\n## Object\nObject型（{}型）は、undefinedとnull以外は何でも受け入れてしまう弱い型です。\n\n```ts\nconst hoge1: Object = 1\nconst hoge2: Object = \"hoge\"\nconst hoge3: Object = [1, 2]\n```\n\n## object\nobject型は、先ほどのObject型（{}型）と別の挙動をします。undefinedとnullはもちろん、文字列や数値もエラーになります。\n\n```ts\nconst hoge1: object = () => {}\nconst hoge2: object = []\nconst hoge3: object = {}\n```\n\n## 配列\n\nArray<number>のような書き方をジェネリック型(Generics, 総称型)と言います。\n\n```ts\nconst hoge1: number[] = [1, 2]\nconst hoge2: Array<number> = [1, 2]\n```\n\n## 関数\n\n```ts\nconst hoge = (x: string): string => {\n  return x + x\n}\nconsole.log(hoge(\"fuga\")) // fugafuga\n```\n  \n戻り値が無い関数の場合はvoidを指定します。\n```ts\nfunction shout(s: string): void {\n  console.log(s) // hoge\n}\nshout(\"hoge\")\n```\n\n# タプル\n要素の個数・型が決められた配列を表現しますJavaScriptには、タプルはありません。\n  \n```ts\nconst hoge: [string, number]\nhoge = [\"hello\", 10]\n```\n\n# ユニオン\nunionは和訳すると結合という意味です。指定したいずれかの型として振る舞います。\n  \n```ts\nlet hoge: number | string\nlet hoge = 1\nlet hoge = \"hoge\"\n```\n\n# 列挙型(enum)\nenumは、Enumeration(イニュメレーション)を略した言葉です。JavaScriptには列挙型はありません。\n  \n```ts\nenum Color {\n  Red,\n  Green,\n  Blue\n}\nconst hoge: Color = Color.Green\nconsole.log(hoge) // 1\n```\n\n```ts\nenum Color {\n  Red = 10,\n  Green,\n  Blue\n}\nconst hoge: Color = Color.Green\nconsole.log(hoge) // 11\n```\n  \n参考：(Enums - TypeScript Deep Dive 日本語版)[https://typescript-jp.gitbook.io/deep-dive/type-system/enums]",
  "bodyHtml": "<p>TypeScriptは、静的型付けプログラミング言語。つまり、型定義できるJavaScriptです。型を予め決めておくことで、コンパイル時にエラーを検知させることができます</p>\n<h1>プリミティブ型（基本型）</h1>\n<ul>\n<li>真偽値（Boolean）</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>数値（Number）</li>\n<li>文字列（String）</li>\n<li>Symbol</li>\n</ul>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge1: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">\"hoge\"</span>\n<span class=\"hljs-keyword\">const</span> hoge2: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">const</span> hoge3: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">false</span></code></pre><p>voidはundefinedを扱う時に使います。主な用途は、関数の返り値を何も返さない時に明示します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge: <span class=\"hljs-built_in\">void</span> = <span class=\"hljs-literal\">undefined</span></code></pre><h2>型推論</h2>\n<p>変数宣言の際にデータ型指定せずに初期値を代入した場合は、型推論により方が決まります。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge = <span class=\"hljs-string\">\"hoge\"</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> hoge) <span class=\"hljs-comment\">// string</span></code></pre><h2>リテラル型</h2>\n<p>特定の文字列や数値のみ許可します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge1: <span class=\"hljs-string\">\"fuga\"</span> = <span class=\"hljs-string\">\"fuga\"</span>\n<span class=\"hljs-keyword\">const</span> hoge2: <span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">const</span> hoge3: <span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">// エラー</span></code></pre><h1>オブジェクト（複合型）</h1>\n<ul>\n<li>Object</li>\n<li>配列</li>\n<li>関数</li>\n<li>正規表現</li>\n<li>Date\nなど</li>\n</ul>\n<h2>Object</h2>\n<p>Object型（{}型）は、undefinedとnull以外は何でも受け入れてしまう弱い型です。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge1: <span class=\"hljs-built_in\">Object</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">const</span> hoge2: <span class=\"hljs-built_in\">Object</span> = <span class=\"hljs-string\">\"hoge\"</span>\n<span class=\"hljs-keyword\">const</span> hoge3: <span class=\"hljs-built_in\">Object</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]</code></pre><h2>object</h2>\n<p>object型は、先ほどのObject型（{}型）と別の挙動をします。undefinedとnullはもちろん、文字列や数値もエラーになります。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge1: object = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {}\n<span class=\"hljs-keyword\">const</span> hoge2: object = []\n<span class=\"hljs-keyword\">const</span> hoge3: object = {}</code></pre><h2>配列</h2>\n<p>Array&lt;number&gt;のような書き方をジェネリック型(Generics, 総称型)と言います。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge1: <span class=\"hljs-built_in\">number</span>[] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n<span class=\"hljs-keyword\">const</span> hoge2: <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">number</span>&gt; = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]</code></pre><h2>関数</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge = (x: <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">string</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> x + x\n}\n<span class=\"hljs-built_in\">console</span>.log(hoge(<span class=\"hljs-string\">\"fuga\"</span>)) <span class=\"hljs-comment\">// fugafuga</span></code></pre><p>戻り値が無い関数の場合はvoidを指定します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shout</span>(<span class=\"hljs-params\">s: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">void</span> </span>{\n  <span class=\"hljs-built_in\">console</span>.log(s) <span class=\"hljs-comment\">// hoge</span>\n}\nshout(<span class=\"hljs-string\">\"hoge\"</span>)</code></pre><h1>タプル</h1>\n<p>要素の個数・型が決められた配列を表現しますJavaScriptには、タプルはありません。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> hoge: [<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">number</span>]\nhoge = [<span class=\"hljs-string\">\"hello\"</span>, <span class=\"hljs-number\">10</span>]</code></pre><h1>ユニオン</h1>\n<p>unionは和訳すると結合という意味です。指定したいずれかの型として振る舞います。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">let</span> hoge: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">string</span>\n<span class=\"hljs-keyword\">let</span> hoge = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> hoge = <span class=\"hljs-string\">\"hoge\"</span></code></pre><h1>列挙型(enum)</h1>\n<p>enumは、Enumeration(イニュメレーション)を略した言葉です。JavaScriptには列挙型はありません。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">enum</span> Color {\n  Red,\n  Green,\n  Blue\n}\n<span class=\"hljs-keyword\">const</span> hoge: Color = Color.Green\n<span class=\"hljs-built_in\">console</span>.log(hoge) <span class=\"hljs-comment\">// 1</span></code></pre><pre><code class=\"hljs\"><span class=\"hljs-keyword\">enum</span> Color {\n  Red = <span class=\"hljs-number\">10</span>,\n  Green,\n  Blue\n}\n<span class=\"hljs-keyword\">const</span> hoge: Color = Color.Green\n<span class=\"hljs-built_in\">console</span>.log(hoge) <span class=\"hljs-comment\">// 11</span></code></pre><p>参考：(Enums - TypeScript Deep Dive 日本語版)[https://typescript-jp.gitbook.io/deep-dive/type-system/enums]</p>\n",
  "dir": "posts/json",
  "base": "20200425.json",
  "ext": ".json",
  "sourceBase": "20200425.md",
  "sourceExt": ".md"
}