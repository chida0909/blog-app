{
  "title": "Nuxt + Vuetify + Firebaseでログイン認証",
  "permalink": "nuxt-vuetify-firebase",
  "description": null,
  "created_at": "2020-05-03T00:00:00.000Z",
  "tags": "Nuxt",
  "bodyContent": "Nuxt.jsにFirebaseを使ってユーザーのログイン認証を行う機能を実装します。ログインフォームはVuetifyのv-formを使います。今回はログインフォームのみで、新規登録フォームは対応しません。\n\n## フォームの用意\nまずはメールアドレスとパスワードを入力して、送信するだけのフォームを作成します。こちらのフォームはバリデーションなど作り込んでいないため、あくまでも参考程度にしてください。\n\n![firebase_setting](./images/firebase_setting.png)\n\npages/login.vue\n```vue\n<template>\n  <v-app>\n    <v-form>\n      <v-text-field\n        v-model=\"login.email\"\n        label=\"email\"\n        required\n      >\n      </v-text-field>\n      <v-text-field\n        v-model=\"login.password\"\n        label=\"Password\"\n        required\n      >\n      </v-text-field>\n      <v-btn @click=\"userLogin\">送信</v-btn>\n    </v-form>\n  </v-app>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      login: {\n        email: null,\n        password: null\n      }\n    }\n  },\n  methods: {\n    userLogin() {\n      console.log('email:', this.login.email)\n      console.log('password:', this.login.password)\n    }\n  }\n}\n</script>\n```\n\n次にuserLoginメソッドを実行した時に、登録済みのユーザーかどうか判断するための処理を作成します。\n\n## Firebaseを使う\nターミナルを開き、firebaseをインストールします。本番環境にも反映させる場合、package.jsonのdependenciesに入れるため--saveオプションを使います。\n```\n$ npm install firebase --save\n```\n  \n[Firebase](https://console.firebase.google.com/u/0/)にアクセスしてプロジェクトを作成します。\n  \nメール / パスワード認証を有効にします。  \n![firebase_setting1](./images/firebase_setting1.png)\n  \n認証用ユーザーを作成します。  \n![firebase_setting2](./images/firebase_setting2.png)\n  \npluginsディレクトリにfirebase.jsを作成します。\n  \nFirebaseを以下の順で操作し、apiKeyなどの自分の設定を確認します。\n  \n【歯車マーク -> プロジェクトを設定 -> 全般 -> Firebase SDK snippetの構成】\n  \n![firebase_setting3](./images/firebase_setting3.png)\n  \nFirebase SDK snippetの構成を確認しながら、firebase.jsを編集します。\n  \n```js\nimport firebase from 'firebase'\n\nif (!firebase.apps.length) {\n  firebase.initializeApp({\n    apiKey: \"********************\",\n    authDomain: \"********************\",\n    databaseURL: \"********************\",\n    projectId: \"********************\",\n    storageBucket: \"********************\",\n    messagingSenderId: \"********************\",\n    appId: \"********************\",\n    measurementId: \"********************\"\n  })\n}\n\nexport default firebase\n```\n  \npages/login.vueのscriptタグ内を編集します。\n```vue\n<script>\nimport firebase from '@/plugins/firebase'\n\nexport default {\n  data() {\n    return {\n      login: {\n        email: '',\n        password: ''\n      }\n    }\n  },\n  methods: {\n    userLogin() {\n      firebase.auth().signInWithEmailAndPassword(this.login.email, this.login.password)\n        .then(user => {\n          console.log('OK')\n          this.$store.commit(\"increment\");\n        })\n        .catch((error) => {\n          console.log('NG')\n      })\n    }\n  }\n}\n</script>\n```\n\nFirebase AuthenticationはcreateUserWithEmailAndPasswordというメソッドを提供しています。このメソッドにユーザが入力しバリデーションにパスしたemailとpasswordを渡します。\n  \nこの状態で先程登録した認証用ユーザーのメールアドレスとパスワードを入力して、送信ボタンを押すとConsoleにOKと表示されます。反対に未登録のメールアドレスなどを入力するとNGと表示されます。\n  \n今回は一旦ここまでですが、次回はVuexを使ってログイン状態をstateに持たせたいと思います。\n\n[NuxtでVuexを使いユーザー認証を行う](./nuxt-vuetify-firebase)\n  \n## 参考\n- [FirebaseとNuxt.jsを使ってユーザ認証関係を簡単に作ってみる+1ヶ月前の自分に教えたいリンク集 - Qiita](https://qiita.com/redshoga/items/da5c0e247e0df314a257)\n- [Vue.js+Firebase Authenticationで認証画面を爆速実装！｜ 開発者ブログ](https://www.isoroot.jp/blog/2451/)",
  "bodyHtml": "<p>Nuxt.jsにFirebaseを使ってユーザーのログイン認証を行う機能を実装します。ログインフォームはVuetifyのv-formを使います。今回はログインフォームのみで、新規登録フォームは対応しません。</p>\n<h2>フォームの用意</h2>\n<p>まずはメールアドレスとパスワードを入力して、送信するだけのフォームを作成します。こちらのフォームはバリデーションなど作り込んでいないため、あくまでも参考程度にしてください。</p>\n<p><img src=\"./images/firebase_setting.png\" alt=\"firebase_setting\"></p>\n<p>pages/login.vue</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;v-app&gt;\n    &lt;v-form&gt;\n      &lt;v-text-field\n        v-model=\"login.email\"\n        label=\"email\"\n        required\n      &gt;\n      &lt;/v-text-field&gt;\n      &lt;v-text-field\n        v-model=\"login.password\"\n        label=\"Password\"\n        required\n      &gt;\n      &lt;/v-text-field&gt;\n      &lt;v-btn @click=\"userLogin\"&gt;送信&lt;/v-btn&gt;\n    &lt;/v-form&gt;\n  &lt;/v-app&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      login: {\n        email: null,\n        password: null\n      }\n    }\n  },\n  methods: {\n    userLogin() {\n      console.log('email:', this.login.email)\n      console.log('password:', this.login.password)\n    }\n  }\n}\n&lt;/script&gt;</code></pre><p>次にuserLoginメソッドを実行した時に、登録済みのユーザーかどうか判断するための処理を作成します。</p>\n<h2>Firebaseを使う</h2>\n<p>ターミナルを開き、firebaseをインストールします。本番環境にも反映させる場合、package.jsonのdependenciesに入れるため--saveオプションを使います。</p>\n<pre><code>$ npm install firebase --save\n</code></pre>\n<p><a href=\"https://console.firebase.google.com/u/0/\">Firebase</a>にアクセスしてプロジェクトを作成します。</p>\n<p>メール / パスワード認証を有効にします。<br>\n<img src=\"./images/firebase_setting1.png\" alt=\"firebase_setting1\"></p>\n<p>認証用ユーザーを作成します。<br>\n<img src=\"./images/firebase_setting2.png\" alt=\"firebase_setting2\"></p>\n<p>pluginsディレクトリにfirebase.jsを作成します。</p>\n<p>Firebaseを以下の順で操作し、apiKeyなどの自分の設定を確認します。</p>\n<p>【歯車マーク -&gt; プロジェクトを設定 -&gt; 全般 -&gt; Firebase SDK snippetの構成】</p>\n<p><img src=\"./images/firebase_setting3.png\" alt=\"firebase_setting3\"></p>\n<p>Firebase SDK snippetの構成を確認しながら、firebase.jsを編集します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> firebase <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase'</span>\n\n<span class=\"hljs-keyword\">if</span> (!firebase.apps.length) {\n  firebase.initializeApp({\n    <span class=\"hljs-attr\">apiKey</span>: <span class=\"hljs-string\">\"********************\"</span>,\n    <span class=\"hljs-attr\">authDomain</span>: <span class=\"hljs-string\">\"********************\"</span>,\n    <span class=\"hljs-attr\">databaseURL</span>: <span class=\"hljs-string\">\"********************\"</span>,\n    <span class=\"hljs-attr\">projectId</span>: <span class=\"hljs-string\">\"********************\"</span>,\n    <span class=\"hljs-attr\">storageBucket</span>: <span class=\"hljs-string\">\"********************\"</span>,\n    <span class=\"hljs-attr\">messagingSenderId</span>: <span class=\"hljs-string\">\"********************\"</span>,\n    <span class=\"hljs-attr\">appId</span>: <span class=\"hljs-string\">\"********************\"</span>,\n    <span class=\"hljs-attr\">measurementId</span>: <span class=\"hljs-string\">\"********************\"</span>\n  })\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> firebase</code></pre><p>pages/login.vueのscriptタグ内を編集します。</p>\n<pre><code class=\"hljs\">&lt;script&gt;\nimport firebase from '@/plugins/firebase'\n\nexport default {\n  data() {\n    return {\n      login: {\n        email: '',\n        password: ''\n      }\n    }\n  },\n  methods: {\n    userLogin() {\n      firebase.auth().signInWithEmailAndPassword(this.login.email, this.login.password)\n        .then(user =&gt; {\n          console.log('OK')\n          this.$store.commit(\"increment\");\n        })\n        .catch((error) =&gt; {\n          console.log('NG')\n      })\n    }\n  }\n}\n&lt;/script&gt;</code></pre><p>Firebase AuthenticationはcreateUserWithEmailAndPasswordというメソッドを提供しています。このメソッドにユーザが入力しバリデーションにパスしたemailとpasswordを渡します。</p>\n<p>この状態で先程登録した認証用ユーザーのメールアドレスとパスワードを入力して、送信ボタンを押すとConsoleにOKと表示されます。反対に未登録のメールアドレスなどを入力するとNGと表示されます。</p>\n<p>今回は一旦ここまでですが、次回はVuexを使ってログイン状態をstateに持たせたいと思います。</p>\n<p><a href=\"./nuxt-vuetify-firebase\">NuxtでVuexを使いユーザー認証を行う</a></p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://qiita.com/redshoga/items/da5c0e247e0df314a257\">FirebaseとNuxt.jsを使ってユーザ認証関係を簡単に作ってみる+1ヶ月前の自分に教えたいリンク集 - Qiita</a></li>\n<li><a href=\"https://www.isoroot.jp/blog/2451/\">Vue.js+Firebase Authenticationで認証画面を爆速実装！｜ 開発者ブログ</a></li>\n</ul>\n",
  "dir": "posts/json",
  "base": "20200503.json",
  "ext": ".json",
  "sourceBase": "20200503.md",
  "sourceExt": ".md"
}