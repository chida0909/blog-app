{
  "title": "nuxt generateの動的ルーティングについて",
  "permalink": "nuxt-generate-routes",
  "description": "Netlifyにデプロイして、その後に動的ルーティング対象のページででリロードするとNotFoundになる現象を確認しました。",
  "created_at": "2020-04-05T00:00:00.000Z",
  "tags": "Nuxt",
  "bodyContent": "Netlifyにデプロイして、その後に動的ルーティング対象のページででリロードするとNotFoundになる現象を確認しました。  \nそこでリロードしてもNotFoundにならないよう、対応しましたのでその時の備忘録です。  \n\n## generateの確認\n\n動的ルーティングとは、URLパラメーターごとに表示を切り替えるページのことです。  \n\ngenerateとは、pages配下に置いた.vueファイルを静的なコンテンツとして出力してくれる機能です。  \n\nNuxt.jsの公式サイトを見るとNetlifyにデプロイする際に実行しているnpm run generateの処理が関係していて、generateコマンドは動的なルーティングを無視するようです。  \n[ルーティング - NuxtJS](https://ja.nuxtjs.org/guide/routing/#動的なルーティング)  \n\nターミナルから実際にコマンドを叩いてみました。（見やすくするために内容を一部省略しています）  \n\n```\n$ npm run generate\nChunk Names\napp\npages/index\npages/contact/index\npages/_id\n```\n\n確かにpages/_idで生成されているところを見ると、動的ルーティングをしているページのファイルは生成されていないです。  \nそのため/nuxt-generate-routesなどでアクセスしても、ページが存在せずNotFoundになります。  \n\n## 解決策\n\nnuxt.config.jsでgenerateの中にroutes関数を定義し、動的ルーティング対象のファイルを書くだけで解決できます。  \n[API: generate プロパティ - NuxtJS](https://ja.nuxtjs.org/api/configuration-generate#routes)  \n\n```\nexport default {\n  generate: {\n    routes: [\n      '/nuxt-generate-routes',\n      '/nuxt-css-common',\n      '/vuetify-css-overwrite'\n    ]\n  }\n}\n```\n\nただ、この方法だとページを追加していく度に毎回追記しなければいけません。  \nそのためjsonから記事一覧を取得し、パーマリンクを配列で返しました。\n\n```\nconst jsonData = require('./posts/summary.json')\n\nexport default {\n  generate: {\n    routes() {\n      const dateArray = jsonData.sourceFileArray.map( s => s.replace(/[^0-9]/g, '') )\n      const contents = dateArray.map( d => jsonData.fileMap[`posts/json/${d}.json`] )\n      return contents.map( c => c.permalink )\n    }\n}\n```\n\nこれで動的ルーティング対象のページでリロードしてもNotFoundになりません。",
  "bodyHtml": "<p>Netlifyにデプロイして、その後に動的ルーティング対象のページででリロードするとNotFoundになる現象を確認しました。<br>\nそこでリロードしてもNotFoundにならないよう、対応しましたのでその時の備忘録です。</p>\n<h2>generateの確認</h2>\n<p>動的ルーティングとは、URLパラメーターごとに表示を切り替えるページのことです。</p>\n<p>generateとは、pages配下に置いた.vueファイルを静的なコンテンツとして出力してくれる機能です。</p>\n<p>Nuxt.jsの公式サイトを見るとNetlifyにデプロイする際に実行しているnpm run generateの処理が関係していて、generateコマンドは動的なルーティングを無視するようです。<br>\n<a href=\"https://ja.nuxtjs.org/guide/routing/#%E5%8B%95%E7%9A%84%E3%81%AA%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0\">ルーティング - NuxtJS</a></p>\n<p>ターミナルから実際にコマンドを叩いてみました。（見やすくするために内容を一部省略しています）</p>\n<pre><code>$ npm run generate\nChunk Names\napp\npages/index\npages/contact/index\npages/_id\n</code></pre>\n<p>確かにpages/_idで生成されているところを見ると、動的ルーティングをしているページのファイルは生成されていないです。<br>\nそのため/nuxt-generate-routesなどでアクセスしても、ページが存在せずNotFoundになります。</p>\n<h2>解決策</h2>\n<p>nuxt.config.jsでgenerateの中にroutes関数を定義し、動的ルーティング対象のファイルを書くだけで解決できます。<br>\n<a href=\"https://ja.nuxtjs.org/api/configuration-generate#routes\">API: generate プロパティ - NuxtJS</a></p>\n<pre><code>export default {\n  generate: {\n    routes: [\n      '/nuxt-generate-routes',\n      '/nuxt-css-common',\n      '/vuetify-css-overwrite'\n    ]\n  }\n}\n</code></pre>\n<p>ただ、この方法だとページを追加していく度に毎回追記しなければいけません。<br>\nそのためjsonから記事一覧を取得し、パーマリンクを配列で返しました。</p>\n<pre><code>const jsonData = require('./posts/summary.json')\n\nexport default {\n  generate: {\n    routes() {\n      const dateArray = jsonData.sourceFileArray.map( s =&gt; s.replace(/[^0-9]/g, '') )\n      const contents = dateArray.map( d =&gt; jsonData.fileMap[`posts/json/${d}.json`] )\n      return contents.map( c =&gt; c.permalink )\n    }\n}\n</code></pre>\n<p>これで動的ルーティング対象のページでリロードしてもNotFoundになりません。</p>\n",
  "dir": "posts/json",
  "base": "20200405.json",
  "ext": ".json",
  "sourceBase": "20200405.md",
  "sourceExt": ".md"
}