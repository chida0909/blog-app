{
  "title": "VuexのmapStateなど",
  "permalink": "vuex-mapstate",
  "description": null,
  "created_at": "2020-04-26T00:00:00.000Z",
  "tags": "Vuex",
  "bodyContent": "「this.$store.state.hoge」と書くことで、Vuexのstoreにあるstateを参照できます。ただ、この書き方は冗長のため、mapStateヘルパーという短縮できる仕組みが用意されています。このヘルパーは、mapMutations, mapGetters, mapActionsも同じ目的で使用できます。\n\nthis.$store.stateやmapStateの違いをコードを見て比較できるよう、Click!!!ボタンを押すことで、カウントをインクリメントするコードを書きました。\n\n---\n\n![counter](../images/counter.png)\n\n---\n  \n&#13;&#10;\n  \n\n# this.$store.state\nthis.$store.stateで表現する場合は、以下の通りです。\n\n```vue\n<template>\n  <div>\n    <button @click=\"increment\">Click!!!</button>\n    <h2>COUNT:{{ count }}</h2>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"app\",\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\");\n    }\n  },\n  computed: {\n    count() {\n      return this.$store.state.count;\n    }\n  }\n};\n</script>\n```\n\n# mapState\nthis.$store.state.countではなく、mapStateを使う場合は以下の通りです。Scriptタグの先頭でmapStateをimportします。そしてcomputed自体のコードが短縮されるのが分かります。  \n\n```vue\n<template>\n  <div>\n    <button @click=\"increment\">Click!!!</button>\n    <h2>COUNT:{{ count }}</h2>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"app\",\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\");\n    }\n  },\n  computed: mapState([\"count\"])\n};\n</script>\n```\n\n# ...mapState\n独自のcomputedプロパティが存在する場合は、先ほどの書き方では表現ができないため、スプレッド構文を使います。今回の例では「COUNT:」と直に書いていた部分を、titleプロパティとして定義しています。\n\n```vue\n<template>\n  <div>\n    <button @click=\"increment\">Click!!!</button>\n    <h2>{{ title }}{{ count }}</h2>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"app\",\n  data() {\n    return {\n      msg: \"count:\"\n    };\n  },\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\");\n    }\n  },\n  computed: {\n    title() {\n      return this.msg.toUpperCase();\n    },\n    ...mapState([\"count\"])\n  }\n};\n</script>\n```",
  "bodyHtml": "<p>「this.$store.state.hoge」と書くことで、Vuexのstoreにあるstateを参照できます。ただ、この書き方は冗長のため、mapStateヘルパーという短縮できる仕組みが用意されています。このヘルパーは、mapMutations, mapGetters, mapActionsも同じ目的で使用できます。</p>\n<p>this.$store.stateやmapStateの違いをコードを見て比較できるよう、Click!!!ボタンを押すことで、カウントをインクリメントするコードを書きました。</p>\n<hr>\n<p><img src=\"../images/counter.png\" alt=\"counter\"></p>\n<hr>\n<p>\r\n</p>\n<h1>this.$store.state</h1>\n<p>this.$store.stateで表現する場合は、以下の通りです。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"increment\"&gt;Click!!!&lt;/button&gt;\n    &lt;h2&gt;COUNT:{{ count }}&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: \"app\",\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\");\n    }\n  },\n  computed: {\n    count() {\n      return this.$store.state.count;\n    }\n  }\n};\n&lt;/script&gt;</code></pre><h1>mapState</h1>\n<p>this.$store.state.countではなく、mapStateを使う場合は以下の通りです。Scriptタグの先頭でmapStateをimportします。そしてcomputed自体のコードが短縮されるのが分かります。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"increment\"&gt;Click!!!&lt;/button&gt;\n    &lt;h2&gt;COUNT:{{ count }}&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"app\",\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\");\n    }\n  },\n  computed: mapState([\"count\"])\n};\n&lt;/script&gt;</code></pre><h1>...mapState</h1>\n<p>独自のcomputedプロパティが存在する場合は、先ほどの書き方では表現ができないため、スプレッド構文を使います。今回の例では「COUNT:」と直に書いていた部分を、titleプロパティとして定義しています。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"increment\"&gt;Click!!!&lt;/button&gt;\n    &lt;h2&gt;{{ title }}{{ count }}&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"app\",\n  data() {\n    return {\n      msg: \"count:\"\n    };\n  },\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\");\n    }\n  },\n  computed: {\n    title() {\n      return this.msg.toUpperCase();\n    },\n    ...mapState([\"count\"])\n  }\n};\n&lt;/script&gt;</code></pre>",
  "dir": "posts/json",
  "base": "20200426.json",
  "ext": ".json",
  "sourceBase": "20200426.md",
  "sourceExt": ".md"
}