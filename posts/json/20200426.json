{
  "title": "VuexのmapStateなど",
  "permalink": "vuex-mapstate",
  "description": null,
  "created_at": "2020-04-26T00:00:00.000Z",
  "tags": "Vuex",
  "bodyContent": "「this.$store.state.hoge」と書くことで、Vuexのstoreにあるstateを参照できます。ただ、この書き方は冗長のため、mapStateヘルパーという短縮できる仕組みが用意されています。このヘルパーは、mapMutations, mapGetters, mapActionsも同じ目的で使用できます。\n\nthis.$store.stateやmapStateの違いをコードを見て比較できるよう、Click!!!ボタンを押すことで、カウントをインクリメントするコードを書きました。\n\n---\n\n![counter](../images/counter.png)\n\n---\n  \n&#13;&#10;\n  \n\nまず、store.jsを次のようにします。\n```js\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment: function(state) {\n      state.count++;\n    }\n  }\n});\n```\n\nmain.jsは次のようにします。\n```js\nimport Vue from \"vue\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nnew Vue({\n  store,\n  render: h => h(App)\n}).$mount(\"#app\");\n```\n\nこの後にApp.vueを書き換えていきます。\n\n# this.$store.state\nthis.$store.stateで表現する場合は、以下の通りです。\n\n```vue\n<template>\n  <div>\n    <button @click=\"increment\">Click!!!</button>\n    <h2>COUNT:{{ count }}</h2>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\");\n    }\n  },\n  computed: {\n    count() {\n      return this.$store.state.count;\n    }\n  }\n};\n</script>\n```\n\n# mapState\nthis.$store.state.countではなく、mapStateを使う場合は以下の通りです。Scriptタグの先頭でimport...を追記します。そしてcomputed自体のコードが短縮されるのが分かります。  \n\n```vue\n<template>\n  <div>\n    <button @click=\"increment\">Click!!!</button>\n    <h2>COUNT:{{ count }}</h2>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\n\nexport default {\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\");\n    }\n  },\n  computed: mapState([\"count\"])\n};\n</script>\n```\n\n# ...mapState\nスプレッド構文を用いると以下のように書けます。スプレッド構文を使うと、複数の算出プロパティを定義することができます。\n\n<template>\n  <div>\n    <button @click=\"increment\">Click!!!</button>\n    <h2>COUNT:{{ count }}</h2>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\n\nexport default {\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\");\n    }\n  },\n  computed: {\n    ...mapState([\"count\"])\n  }\n};\n</script>",
  "bodyHtml": "<p>「this.$store.state.hoge」と書くことで、Vuexのstoreにあるstateを参照できます。ただ、この書き方は冗長のため、mapStateヘルパーという短縮できる仕組みが用意されています。このヘルパーは、mapMutations, mapGetters, mapActionsも同じ目的で使用できます。</p>\n<p>this.$store.stateやmapStateの違いをコードを見て比較できるよう、Click!!!ボタンを押すことで、カウントをインクリメントするコードを書きました。</p>\n<hr>\n<p><img src=\"../images/counter.png\" alt=\"counter\"></p>\n<hr>\n<p>\r\n</p>\n<p>まず、store.jsを次のようにします。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>;\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vuex\"</span>;\n\nVue.use(Vuex);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-attr\">state</span>: {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\n  },\n  <span class=\"hljs-attr\">mutations</span>: {\n    <span class=\"hljs-attr\">increment</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">state</span>) </span>{\n      state.count++;\n    }\n  }\n});</code></pre><p>main.jsは次のようにします。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>;\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./App\"</span>;\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./store\"</span>;\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  store,\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> h(App)\n}).$mount(<span class=\"hljs-string\">\"#app\"</span>);</code></pre><p>この後にApp.vueを書き換えていきます。</p>\n<h1>this.$store.state</h1>\n<p>this.$store.stateで表現する場合は、以下の通りです。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"increment\"&gt;Click!!!&lt;/button&gt;\n    &lt;h2&gt;COUNT:{{ count }}&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\");\n    }\n  },\n  computed: {\n    count() {\n      return this.$store.state.count;\n    }\n  }\n};\n&lt;/script&gt;</code></pre><h1>mapState</h1>\n<p>this.$store.state.countではなく、mapStateを使う場合は以下の通りです。Scriptタグの先頭でimport...を追記します。そしてcomputed自体のコードが短縮されるのが分かります。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"increment\"&gt;Click!!!&lt;/button&gt;\n    &lt;h2&gt;COUNT:{{ count }}&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState } from \"vuex\";\n\nexport default {\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\");\n    }\n  },\n  computed: mapState([\"count\"])\n};\n&lt;/script&gt;</code></pre><h1>...mapState</h1>\n<p>スプレッド構文を用いると以下のように書けます。スプレッド構文を使うと、複数の算出プロパティを定義することができます。</p>\n<p>&lt;template&gt;\n&lt;div&gt;\n&lt;button @click=&quot;increment&quot;&gt;Click!!!&lt;/button&gt;\n&lt;h2&gt;COUNT:{{ count }}&lt;/h2&gt;\n&lt;/div&gt;\n&lt;/template&gt;</p>\n<p>&lt;script&gt;\nimport { mapState } from &quot;vuex&quot;;</p>\n<p>export default {\nmethods: {\nincrement() {\nthis.$store.commit(&quot;increment&quot;);\n}\n},\ncomputed: {\n...mapState([&quot;count&quot;])\n}\n};\n&lt;/script&gt;</p>\n",
  "dir": "posts/json",
  "base": "20200426.json",
  "ext": ".json",
  "sourceBase": "20200426.md",
  "sourceExt": ".md"
}