{
  "title": "Vue.jsでドラッグアンドドロップ",
  "permalink": "vue-drag-drop",
  "description": null,
  "created_at": "2020-04-14T00:00:00.000Z",
  "tags": "Vue",
  "bodyContent": "Vue.jsでドラッグ＆ドロップする場合、Vue.Draggableという便利なライブラリがありますが、それを使わずにHTML5の機能を利用します。\n\n  \n[ドラッグ操作 - DragDrop | MDN](https://developer.mozilla.org/ja/docs/DragDrop/Drag_Operations)\n\n  \nドラッグ＆ドロップのサンプルは[こちら](https://chida.blog/sample/dragdrop)です。\n\n## ドラッグの設定\nドラッグの設定とイベントの取得を行います。以下のコードではドラッグした要素のindexを、ディベロッパーツールのConsole上に表示します。  \n\n- draggable属性：要素をドラッグ可能にする\n- dragstartイベント：ドラッグ開始時にを発火\n\n```js\n<template>\n  <div>\n    <div\n      v-for=\"(user, index) in users\"\n      :key=\"user.id\"\n      draggable\n      @dragstart=\"dragMethod($event, index)\"\n    >\n      {{user.name}}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      users: [\n        { id: 1, name: \"山田\" },\n        { id: 2, name: \"四宮\" },\n        { id: 3, name: \"山本\" }\n      ]\n    };\n  },\n  methods: {\n    dragMethod(event, index) {\n      console.log(index);\n    }\n  }\n};\n</script>\n```\n\n画面上の表示\n```\n山田\n四宮\n山本\n```\n\nこの状態だとドラッグは出来ますが、ドロップが出来ません。  \n\nconsole.log(index)を確認するため、画面上の山田をドラッグします。そうするとConsoleに0、四宮をドラッグすると1、山本をドラッグすると2が表示されます。  \n\n## DataTransferオブジェクトの設定\n\n先ほど書いたコードのmethods内を以下のように変更します。\n\n```js\nmethods: {\n  dragMethod(event, index) {\n    event.dataTransfer.dropEffect = \"move\";\n    event.dataTransfer.effectAllowed = \"move\";\n    event.dataTransfer.setData(\"drag-index\", index);\n    const dragEvent = event.dataTransfer.getData(\"drag-index\");\n    console.log(dragEvent);\n  }\n}\n```\n\nドラッグするデータをDataTransferオブジェクトにセットすることで、ドロップ先に受け渡すことができるようになります。  \n\nDataTransferとはドラッグ＆ドロップ操作の実行中や、ドラッグされているデータを保持するために使われるオブジェクトです。\n\n- dropEffectプロパティ：現在の操作の種類を返す（none, move, copy等）\n- effectAllowedプロパティ：許可される操作の種類を返す（none, move, copy等）\n- etDataメソッド：データをセットする\n- getDataメソッド：データを取得する\n\n## ドロップの設定\n\ntemplateタグ内にdrop・dragover・dragenterの各イベントを追加します。そしてmethods内にdragMethodメソッドを追加します。  \n\n```js\n<template>\n  <div>\n    <div\n      v-for=\"(user, index) in users\"\n      :key=\"user.id\"\n      draggable\n      @dragstart=\"dragMethod($event, index)\"\n      @drop=\"dropMethod($event, index)\"\n      @dragover.prevent\n      @dragenter.prevent\n    >\n      {{user.name}}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      users: [\n        { id: 1, name: \"山田\" },\n        { id: 2, name: \"四宮\" },\n        { id: 3, name: \"山本\" }\n      ]\n    };\n  },\n  methods: {\n    dragMethod(event, index) {\n      event.dataTransfer.dropEffect = \"move\";\n      event.dataTransfer.effectAllowed = \"move\";\n      event.dataTransfer.setData(\"drag-index\", index);\n    },\n    dropMethod(event, index) {\n      const dragEvent = event.dataTransfer.getData(\"drag-index\");\n      console.log(dragEvent);\n    }\n  }\n};\n</script>\n```\n\n各イベントを設定して、dropイベントに設定したメソッドにgetDataをセットすることで、ドロップ時のイベントを取得できます。  \n\n- dropイベント：ドロップ開始時に発火\n- dragoverイベント：ドラッグ要素がドロップ要素に重なっている間に発火\n- dragenterイベント：ドラッグ要素がドロップ要素に入った時に発火\n\n\n## ドラッグアンドドロップの反映\n\n先ほどのコードのmethods内のdropMethodを以下のように変更します。\n\n```js\ndropMethod(event, index) {\n  const getEvent = event.dataTransfer.getData(\"drag-index\");\n  const deleteTarget = this.users.splice(index, 1);\n  this.users.splice(getEvent, 0, deleteTarget[0]);\n}\n```\n\n全体のコードは以下になります。\n\n```js\n<template>\n  <div>\n    <div\n      v-for=\"(user, index) in users\"\n      :key=\"user.id\"\n      draggable\n      @dragstart=\"dragMethod($event, index)\"\n      @drop=\"dropMethod($event, index)\"\n      @dragover.prevent\n      @dragenter.prevent\n    >\n      {{user.name}}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      users: [\n        { id: 1, name: \"山田\" },\n        { id: 2, name: \"四宮\" },\n        { id: 3, name: \"山本\" }\n      ]\n    };\n  },\n  methods: {\n    dragMethod(event, index) {\n      event.dataTransfer.dropEffect = \"move\";\n      event.dataTransfer.effectAllowed = \"move\";\n      event.dataTransfer.setData(\"drag-index\", index);\n    },\n    dropMethod(event, index) {\n      const dropEvent = event.dataTransfer.getData(\"drag-index\");\n      const deleteTarget = this.users.splice(index, 1);\n      this.users.splice(dropEvent, 0, deleteTarget[0]);\n    }\n  }\n};\n</script>\n```\n\nこれでドラッグ&ドロップのイベントが反映されて、人名を上下に移動できます。\n\n  \n更に{{user.name}}を囲っているdivタグをspanタグに変えることで横並びになり、人名を左右に移動することができます。  \n\n## 属性、イベントなどのまとめ\n\n### 属性\n- draggable属性：要素をドラッグ可能にする\n\n### イベント\n- dragstartイベント：ドラッグ開始時にを発火\n- dropイベント：ドロップ開始時に発火\n- dragoverイベント：ドラッグ要素がドロップ要素に重なっている間に発火\n- dragenterイベント：ドラッグ要素がドロップ要素に入った時に発火\n\n### DragEventオブジェクト\n- dropEffectプロパティ：現在の操作の種類を返す\n- effectAllowedプロパティ：許可される操作の種類を返す\n- setDataメソッド：データをセットする\n- getDataメソッド：データを取得する\n\n## 参考\n[ドラッグ＆ドロップ－HTML5のAPI、および、関連仕様](http://www.htmq.com/dnd/)",
  "bodyHtml": "<p>Vue.jsでドラッグ＆ドロップする場合、Vue.Draggableという便利なライブラリがありますが、それを使わずにHTML5の機能を利用します。</p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/DragDrop/Drag_Operations\">ドラッグ操作 - DragDrop | MDN</a></p>\n<p>ドラッグ＆ドロップのサンプルは<a href=\"https://chida.blog/sample/dragdrop\">こちら</a>です。</p>\n<h2>ドラッグの設定</h2>\n<p>ドラッグの設定とイベントの取得を行います。以下のコードではドラッグした要素のindexを、ディベロッパーツールのConsole上に表示します。</p>\n<ul>\n<li>draggable属性：要素をドラッグ可能にする</li>\n<li>dragstartイベント：ドラッグ開始時にを発火</li>\n</ul>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;div\n      v-for=\"(user, index) in users\"\n      :key=\"user.id\"\n      draggable\n      @dragstart=\"dragMethod($event, index)\"\n    &gt;\n      {{user.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      users: [\n        { id: 1, name: \"山田\" },\n        { id: 2, name: \"四宮\" },\n        { id: 3, name: \"山本\" }\n      ]\n    };\n  },\n  methods: {\n    dragMethod(event, index) {\n      console.log(index);\n    }\n  }\n};\n&lt;/script&gt;</code></pre><p>画面上の表示</p>\n<pre><code>山田\n四宮\n山本\n</code></pre>\n<p>この状態だとドラッグは出来ますが、ドロップが出来ません。</p>\n<p>console.log(index)を確認するため、画面上の山田をドラッグします。そうするとConsoleに0、四宮をドラッグすると1、山本をドラッグすると2が表示されます。</p>\n<h2>DataTransferオブジェクトの設定</h2>\n<p>先ほど書いたコードのmethods内を以下のように変更します。</p>\n<pre><code class=\"hljs\">methods: {\n  dragMethod(event, index) {\n    event.dataTransfer.dropEffect = <span class=\"hljs-string\">\"move\"</span>;\n    event.dataTransfer.effectAllowed = <span class=\"hljs-string\">\"move\"</span>;\n    event.dataTransfer.setData(<span class=\"hljs-string\">\"drag-index\"</span>, index);\n    <span class=\"hljs-keyword\">const</span> dragEvent = event.dataTransfer.getData(<span class=\"hljs-string\">\"drag-index\"</span>);\n    <span class=\"hljs-built_in\">console</span>.log(dragEvent);\n  }\n}</code></pre><p>ドラッグするデータをDataTransferオブジェクトにセットすることで、ドロップ先に受け渡すことができるようになります。</p>\n<p>DataTransferとはドラッグ＆ドロップ操作の実行中や、ドラッグされているデータを保持するために使われるオブジェクトです。</p>\n<ul>\n<li>dropEffectプロパティ：現在の操作の種類を返す（none, move, copy等）</li>\n<li>effectAllowedプロパティ：許可される操作の種類を返す（none, move, copy等）</li>\n<li>etDataメソッド：データをセットする</li>\n<li>getDataメソッド：データを取得する</li>\n</ul>\n<h2>ドロップの設定</h2>\n<p>templateタグ内にdrop・dragover・dragenterの各イベントを追加します。そしてmethods内にdragMethodメソッドを追加します。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;div\n      v-for=\"(user, index) in users\"\n      :key=\"user.id\"\n      draggable\n      @dragstart=\"dragMethod($event, index)\"\n      @drop=\"dropMethod($event, index)\"\n      @dragover.prevent\n      @dragenter.prevent\n    &gt;\n      {{user.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      users: [\n        { id: 1, name: \"山田\" },\n        { id: 2, name: \"四宮\" },\n        { id: 3, name: \"山本\" }\n      ]\n    };\n  },\n  methods: {\n    dragMethod(event, index) {\n      event.dataTransfer.dropEffect = \"move\";\n      event.dataTransfer.effectAllowed = \"move\";\n      event.dataTransfer.setData(\"drag-index\", index);\n    },\n    dropMethod(event, index) {\n      const dragEvent = event.dataTransfer.getData(\"drag-index\");\n      console.log(dragEvent);\n    }\n  }\n};\n&lt;/script&gt;</code></pre><p>各イベントを設定して、dropイベントに設定したメソッドにgetDataをセットすることで、ドロップ時のイベントを取得できます。</p>\n<ul>\n<li>dropイベント：ドロップ開始時に発火</li>\n<li>dragoverイベント：ドラッグ要素がドロップ要素に重なっている間に発火</li>\n<li>dragenterイベント：ドラッグ要素がドロップ要素に入った時に発火</li>\n</ul>\n<h2>ドラッグアンドドロップの反映</h2>\n<p>先ほどのコードのmethods内のdropMethodを以下のように変更します。</p>\n<pre><code class=\"hljs\">dropMethod(event, index) {\n  <span class=\"hljs-keyword\">const</span> getEvent = event.dataTransfer.getData(<span class=\"hljs-string\">\"drag-index\"</span>);\n  <span class=\"hljs-keyword\">const</span> deleteTarget = <span class=\"hljs-keyword\">this</span>.users.splice(index, <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">this</span>.users.splice(getEvent, <span class=\"hljs-number\">0</span>, deleteTarget[<span class=\"hljs-number\">0</span>]);\n}</code></pre><p>全体のコードは以下になります。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;div\n      v-for=\"(user, index) in users\"\n      :key=\"user.id\"\n      draggable\n      @dragstart=\"dragMethod($event, index)\"\n      @drop=\"dropMethod($event, index)\"\n      @dragover.prevent\n      @dragenter.prevent\n    &gt;\n      {{user.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {\n      users: [\n        { id: 1, name: \"山田\" },\n        { id: 2, name: \"四宮\" },\n        { id: 3, name: \"山本\" }\n      ]\n    };\n  },\n  methods: {\n    dragMethod(event, index) {\n      event.dataTransfer.dropEffect = \"move\";\n      event.dataTransfer.effectAllowed = \"move\";\n      event.dataTransfer.setData(\"drag-index\", index);\n    },\n    dropMethod(event, index) {\n      const dropEvent = event.dataTransfer.getData(\"drag-index\");\n      const deleteTarget = this.users.splice(index, 1);\n      this.users.splice(dropEvent, 0, deleteTarget[0]);\n    }\n  }\n};\n&lt;/script&gt;</code></pre><p>これでドラッグ&amp;ドロップのイベントが反映されて、人名を上下に移動できます。</p>\n<p>更に{{user.name}}を囲っているdivタグをspanタグに変えることで横並びになり、人名を左右に移動することができます。</p>\n<h2>属性、イベントなどのまとめ</h2>\n<h3>属性</h3>\n<ul>\n<li>draggable属性：要素をドラッグ可能にする</li>\n</ul>\n<h3>イベント</h3>\n<ul>\n<li>dragstartイベント：ドラッグ開始時にを発火</li>\n<li>dropイベント：ドロップ開始時に発火</li>\n<li>dragoverイベント：ドラッグ要素がドロップ要素に重なっている間に発火</li>\n<li>dragenterイベント：ドラッグ要素がドロップ要素に入った時に発火</li>\n</ul>\n<h3>DragEventオブジェクト</h3>\n<ul>\n<li>dropEffectプロパティ：現在の操作の種類を返す</li>\n<li>effectAllowedプロパティ：許可される操作の種類を返す</li>\n<li>setDataメソッド：データをセットする</li>\n<li>getDataメソッド：データを取得する</li>\n</ul>\n<h2>参考</h2>\n<p><a href=\"http://www.htmq.com/dnd/\">ドラッグ＆ドロップ－HTML5のAPI、および、関連仕様</a></p>\n",
  "dir": "posts/json",
  "base": "20200414.json",
  "ext": ".json",
  "sourceBase": "20200414.md",
  "sourceExt": ".md"
}