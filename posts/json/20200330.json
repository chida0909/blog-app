{
  "title": "Nuxt.jsのpluginsを使う",
  "permalink": "nuxt-plugins-use",
  "description": null,
  "created_at": "2020-03-30T00:00:00.000Z",
  "tags": "Nuxt",
  "bodyContent": "Nuxt.jsではJavaScriptプラグインを定義することができます。PluginsはVue.jsアプリケーションがインスタンス化される前に実行されます。今回はPluginsを使い、Nuxt内で定数を定義します。\n\n# thisの挙動で書き方が変わる\nまず、Pluginsの書き方のパターンについて書きます。thisが使える or 使えない場合で、Pluginsの書き方が変わります。これを知らないでPluginsを呼び出すと上手く実装できない場合があります。  \n[プラグイン - NuxtJS](https://ja.nuxtjs.org/guide/plugins#アプリケーションのルートや-context-に注入する)\n\n## thisが使えないパターン\nページコンポーネントがロードされる前に実行されるasyncDataでは、thisが使えません。  \nそのため、asyncDataの第一引数であるcontextを利用してPluginsを呼び出します。  \n[コンテキストに注入する](https://ja.nuxtjs.org/guide/plugins#コンテキストに注入する)  \n\n## thisが使えるパターン\nページコンポーネントがロードされた後に実行されるdataオブジェクトや、mountedではthisが利用できます。  \nそのため、thisを利用してPluginsを呼び出します。  \n[vue-インスタンスに注入する](https://ja.nuxtjs.org/guide/plugins#vue-インスタンスに注入する)  \n\n今回の定数の定義は、thisが使えるdataオブジェクトに定義しますのでthisが使えるパターンで実装します。\n\n# 定数の定義\n\n## plugins/constant.js\n\npluginsディレクトリ配下にjsファイルを作成します。そして[インスタンスプロパティの追加](https://jp.vuejs.org/v2/cookbook/adding-instance-properties.html)を参考にインスタンスプロパティを作成します。\n\n```\nimport Vue from 'vue'\n\nVue.prototype.$constant = {\n  title: 'Chid Blog'\n}\n```\n\n## nuxt.config.js\n\n先ほど作成したjsファイルを定義します。拡張子は省略しても問題ありません。\n\n```\n/*\n** Plugins to load before mounting the App\n*/\nplugins: [\n  '~/plugins/constant'\n]\n```\n\n## pages/index.vue\n\nこれで全てのコンポーネントに対し、Pluginsに定義したインスタンスプロパティを呼び出すことができます。\n\n```\nexport default {\n  data() {\n    return {\n      title: this.$constant.title // Chid Blog\n    }\n  }\n}\n```\n\n## 参考にしたサイト\n[【Nuxt】pluginを用いてグローバルな定数を定義する](https://qiita.com/atomu2701/items/61f5e5af3b142e537212)",
  "bodyHtml": "<p>Nuxt.jsではJavaScriptプラグインを定義することができます。PluginsはVue.jsアプリケーションがインスタンス化される前に実行されます。今回はPluginsを使い、Nuxt内で定数を定義します。</p>\n<h1>thisの挙動で書き方が変わる</h1>\n<p>まず、Pluginsの書き方のパターンについて書きます。thisが使える or 使えない場合で、Pluginsの書き方が変わります。これを知らないでPluginsを呼び出すと上手く実装できない場合があります。<br>\n<a href=\"https://ja.nuxtjs.org/guide/plugins#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%88%E3%82%84-context-%E3%81%AB%E6%B3%A8%E5%85%A5%E3%81%99%E3%82%8B\">プラグイン - NuxtJS</a></p>\n<h2>thisが使えないパターン</h2>\n<p>ページコンポーネントがロードされる前に実行されるasyncDataでは、thisが使えません。<br>\nそのため、asyncDataの第一引数であるcontextを利用してPluginsを呼び出します。<br>\n<a href=\"https://ja.nuxtjs.org/guide/plugins#%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AB%E6%B3%A8%E5%85%A5%E3%81%99%E3%82%8B\">コンテキストに注入する</a></p>\n<h2>thisが使えるパターン</h2>\n<p>ページコンポーネントがロードされた後に実行されるdataオブジェクトや、mountedではthisが利用できます。<br>\nそのため、thisを利用してPluginsを呼び出します。<br>\n<a href=\"https://ja.nuxtjs.org/guide/plugins#vue-%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AB%E6%B3%A8%E5%85%A5%E3%81%99%E3%82%8B\">vue-インスタンスに注入する</a></p>\n<p>今回の定数の定義は、thisが使えるdataオブジェクトに定義しますのでthisが使えるパターンで実装します。</p>\n<h1>定数の定義</h1>\n<h2>plugins/constant.js</h2>\n<p>pluginsディレクトリ配下にjsファイルを作成します。そして<a href=\"https://jp.vuejs.org/v2/cookbook/adding-instance-properties.html\">インスタンスプロパティの追加</a>を参考にインスタンスプロパティを作成します。</p>\n<pre><code>import Vue from 'vue'\n\nVue.prototype.$constant = {\n  title: 'Chid Blog'\n}\n</code></pre>\n<h2>nuxt.config.js</h2>\n<p>先ほど作成したjsファイルを定義します。拡張子は省略しても問題ありません。</p>\n<pre><code>/*\n** Plugins to load before mounting the App\n*/\nplugins: [\n  '~/plugins/constant'\n]\n</code></pre>\n<h2>pages/index.vue</h2>\n<p>これで全てのコンポーネントに対し、Pluginsに定義したインスタンスプロパティを呼び出すことができます。</p>\n<pre><code>export default {\n  data() {\n    return {\n      title: this.$constant.title // Chid Blog\n    }\n  }\n}\n</code></pre>\n<h2>参考にしたサイト</h2>\n<p><a href=\"https://qiita.com/atomu2701/items/61f5e5af3b142e537212\">【Nuxt】pluginを用いてグローバルな定数を定義する</a></p>\n",
  "dir": "posts/json",
  "base": "20200330.json",
  "ext": ".json",
  "sourceBase": "20200330.md",
  "sourceExt": ".md"
}