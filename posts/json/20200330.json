{
  "title": "Nuxt.jsのpluginsを使い定数を定義する",
  "permalink": "nuxt-plugins-use",
  "description": null,
  "created_at": "2020-03-30T00:00:00.000Z",
  "tags": "Nuxt",
  "bodyContent": "Nuxt.jsではJavaScriptプラグインを定義することができます。PluginsはVue.jsアプリケーションがインスタンス化される前に実行されます。今回はPluginsを使い、Nuxt内で定数を定義します。\n\n# thisの挙動で書き方が変わる\nまず、Pluginsの書き方のパターンについて書きます。thisが使える、使えない場合でPluginsの書き方が変わります。これを知らないでPluginsを呼び出すと上手く実装できない場合があります。  \n[プラグイン - NuxtJS](https://ja.nuxtjs.org/guide/plugins#アプリケーションのルートや-context-に注入する)\n\n## thisが使えるパターン\nページコンポーネントがロードされた後に実行されるdataメソッドや、mountedではthisが利用できます。そのため、thisを利用してPluginsを呼び出します。  \n[vue-インスタンスに注入する](https://ja.nuxtjs.org/guide/plugins#vue-インスタンスに注入する)  \n\n## thisが使えないパターン\nページコンポーネントがロードされる前に実行されるasyncDataでは、thisが使えません。そのため、asyncDataの第一引数であるcontextを利用してPluginsを呼び出します。  \n[コンテキストに注入する](https://ja.nuxtjs.org/guide/plugins#コンテキストに注入する)  \n  \n今回は両方のパターンで書いていきます。\n  \n## 定数の設定\nまずはpluginsとnuxt.config.jsの設定をします。\n\n## plugins/constant.js\n先にpluginsディレクトリ配下にconstant.jsファイルを作成します。\n\n## nuxt.config.js\n先ほど作成したjsファイルを定義します。拡張子は省略しても問題ありません。\n\n```js\n/*\n** Plugins to load before mounting the App\n*/\nplugins: [\n  '~/plugins/constant'\n]\n```\n\n# thisが使えるパターン\nまずはthisが使えるパターンで定数を定義します。  \n\nconstant.js\n```js\nimport Vue from 'vue'\n\n// Vue インスタンスに注入する\nVue.prototype.$constant = {\n  title: 'Hoge',\n}\n```\n\npages/index.vue\n```js\nmounted() {\n  console.log(this.$constant.title) // Hoge\n}\n```\n\n# thisが使えないパターン\n次にthisが使えないパターン（contextを利用）で定数を定義します。  \n\nconstant.js\n```js\n// コンテキストに注入する\nexport default ({ app }, inject) => {\n  app.title = \"Hoge\"\n}\n```\n\npages/index.vue\n```js\nasyncData(context) {\n  console.log(context.app.title) // Hoge\n}\n```\n\n# 両方に対応したい場合\nmountedやasyncDataに同じ定数を定義したい場合、書き方が冗長になります。それを解決するには、inject関数を使用します。  \n\nconstant.js\n```js\n// 統合された注入\nexport default ({ app }, inject) => {\n  inject(\"title\", \"Hoge\")\n}\n```\n\n```js\nasyncData(context) {\n  console.log(context.app.title) // Hoge\n},\nmounted() {\n  console.log(this.$title) // Hoge\n}\n```\n\n## 参考にしたサイト\n[プラグイン - NuxtJS](https://ja.nuxtjs.org/guide/plugins#アプリケーションのルートや-context-に注入する)",
  "bodyHtml": "<p>Nuxt.jsではJavaScriptプラグインを定義することができます。PluginsはVue.jsアプリケーションがインスタンス化される前に実行されます。今回はPluginsを使い、Nuxt内で定数を定義します。</p>\n<h1>thisの挙動で書き方が変わる</h1>\n<p>まず、Pluginsの書き方のパターンについて書きます。thisが使える、使えない場合でPluginsの書き方が変わります。これを知らないでPluginsを呼び出すと上手く実装できない場合があります。<br>\n<a href=\"https://ja.nuxtjs.org/guide/plugins#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%88%E3%82%84-context-%E3%81%AB%E6%B3%A8%E5%85%A5%E3%81%99%E3%82%8B\">プラグイン - NuxtJS</a></p>\n<h2>thisが使えるパターン</h2>\n<p>ページコンポーネントがロードされた後に実行されるdataメソッドや、mountedではthisが利用できます。そのため、thisを利用してPluginsを呼び出します。<br>\n<a href=\"https://ja.nuxtjs.org/guide/plugins#vue-%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AB%E6%B3%A8%E5%85%A5%E3%81%99%E3%82%8B\">vue-インスタンスに注入する</a></p>\n<h2>thisが使えないパターン</h2>\n<p>ページコンポーネントがロードされる前に実行されるasyncDataでは、thisが使えません。そのため、asyncDataの第一引数であるcontextを利用してPluginsを呼び出します。<br>\n<a href=\"https://ja.nuxtjs.org/guide/plugins#%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%81%AB%E6%B3%A8%E5%85%A5%E3%81%99%E3%82%8B\">コンテキストに注入する</a></p>\n<p>今回は両方のパターンで書いていきます。</p>\n<h2>定数の設定</h2>\n<p>まずはpluginsとnuxt.config.jsの設定をします。</p>\n<h2>plugins/constant.js</h2>\n<p>先にpluginsディレクトリ配下にconstant.jsファイルを作成します。</p>\n<h2>nuxt.config.js</h2>\n<p>先ほど作成したjsファイルを定義します。拡張子は省略しても問題ありません。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">/*\n** Plugins to load before mounting the App\n*/</span>\n<span class=\"hljs-attr\">plugins</span>: [\n  <span class=\"hljs-string\">'~/plugins/constant'</span>\n]</code></pre><h1>thisが使えるパターン</h1>\n<p>まずはthisが使えるパターンで定数を定義します。</p>\n<p>constant.js</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n\n<span class=\"hljs-comment\">// Vue インスタンスに注入する</span>\nVue.prototype.$constant = {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Hoge'</span>,\n}</code></pre><p>pages/index.vue</p>\n<pre><code class=\"hljs\">mounted() {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.$constant.title) <span class=\"hljs-comment\">// Hoge</span>\n}</code></pre><h1>thisが使えないパターン</h1>\n<p>次にthisが使えないパターン（contextを利用）で定数を定義します。</p>\n<p>constant.js</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// コンテキストに注入する</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ({ app }, inject) =&gt; {\n  app.title = <span class=\"hljs-string\">\"Hoge\"</span>\n}</code></pre><p>pages/index.vue</p>\n<pre><code class=\"hljs\">asyncData(context) {\n  <span class=\"hljs-built_in\">console</span>.log(context.app.title) <span class=\"hljs-comment\">// Hoge</span>\n}</code></pre><h1>両方に対応したい場合</h1>\n<p>mountedやasyncDataに同じ定数を定義したい場合、書き方が冗長になります。それを解決するには、inject関数を使用します。</p>\n<p>constant.js</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// 統合された注入</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ({ app }, inject) =&gt; {\n  inject(<span class=\"hljs-string\">\"title\"</span>, <span class=\"hljs-string\">\"Hoge\"</span>)\n}</code></pre><pre><code class=\"hljs\">asyncData(context) {\n  <span class=\"hljs-built_in\">console</span>.log(context.app.title) <span class=\"hljs-comment\">// Hoge</span>\n},\nmounted() {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.$title) <span class=\"hljs-comment\">// Hoge</span>\n}</code></pre><h2>参考にしたサイト</h2>\n<p><a href=\"https://ja.nuxtjs.org/guide/plugins#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%88%E3%82%84-context-%E3%81%AB%E6%B3%A8%E5%85%A5%E3%81%99%E3%82%8B\">プラグイン - NuxtJS</a></p>\n",
  "dir": "posts/json",
  "base": "20200330.json",
  "ext": ".json",
  "sourceBase": "20200330.md",
  "sourceExt": ".md"
}