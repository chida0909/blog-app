{
  "title": "package.jsonのdependenciesなどについて",
  "permalink": "npm-packagejson-dependencies",
  "description": null,
  "created_at": "2020-04-24T00:00:00.000Z",
  "tags": "JavaScript",
  "bodyContent": "package.jsonのdependenciesとdevDependenciesって、何がどう違うんだっけ？と毎回ググってしまうので備忘録です。\n  \n- dependenciesは、本番環境にも必要なパッケージ\n- devDependenciesは、開発環境でのみ必要なパッケージ\n  \n開発環境でのみ必要なパッケージとは、テストやタスクランナー系のことです。本番実行時には使わないものという認識で問題ないです。\n  \n# package.jsonに追加する方法\n\n## npm\ndependenciesに追加\n```json\n$ npm install --save <package name>\n$ npm i -S <package name> // 省略形\n```\n\ndevDependenciesに追加\n```json\n$ npm install --save-dev <package name>\n$ npm i -D <package name> // 省略形\n```\n\n## yarn\ndependenciesに追加\n```json\n$ yarn add <package name>\n```\n\ndevDependenciesに追加\n```json\n$ yarn add --dev <package name>\n```\n\n# 使い分けるメリット\ndependenciesとdevDependenciesのどちらにインストールしても大して違いはありません。インストールしているパッケージが、製品に必要なパッケージなのか開発に必要なパッケージなのかを開発者が認識できるくらいです。\n\n# パッケージのインストール\npackage.jsonに書かれているパッケージをインストールするには次のコマンドを実行します。ライブラリ自体はnode_modules内にダウンロードされます。  \n\n## npm\nすべてインストール\n```json\n$ npm install\n$ npm i // 省略形\n```\n  \ndependenciesのみインストール\n```json\n$ npm install --production\n```\n  \n## yarn\nすべてインストール\n```json\n$ yarn install\n```\n  \ndependenciesのみインストール\n```json\n$ yarn install --production\n```\n\nyarnの場合は、通常環境変数のNODE_ENVを見て環境判別をしていて、NODE_ENVにproductionが設定されていればこのオプションがなくてもproduction用インストールがされます。\n\n# グローバルインストール\nちなみにグローバルインストールを実行した場合は、package.jsonには記録されません。パッケージはプロジェクトの外側のユーザー単位でインストールされます。\n\n## npm\n```json\n$ npm install --global\n$ npm i -g // 省略形\n```\n\n## yarn\n```json\n$ yarn global add <package name>\n```",
  "bodyHtml": "<p>package.jsonのdependenciesとdevDependenciesって、何がどう違うんだっけ？と毎回ググってしまうので備忘録です。</p>\n<ul>\n<li>dependenciesは、本番環境にも必要なパッケージ</li>\n<li>devDependenciesは、開発環境でのみ必要なパッケージ</li>\n</ul>\n<p>開発環境でのみ必要なパッケージとは、テストやタスクランナー系のことです。本番実行時には使わないものという認識で問題ないです。</p>\n<h1>package.jsonに追加する方法</h1>\n<h2>npm</h2>\n<p>dependenciesに追加</p>\n<pre><code class=\"hljs\">$ npm install --save &lt;package name&gt;\n$ npm i -S &lt;package name&gt; // 省略形</code></pre><p>devDependenciesに追加</p>\n<pre><code class=\"hljs\">$ npm install --save-dev &lt;package name&gt;\n$ npm i -D &lt;package name&gt; // 省略形</code></pre><h2>yarn</h2>\n<p>dependenciesに追加</p>\n<pre><code class=\"hljs\">$ yarn add &lt;package name&gt;</code></pre><p>devDependenciesに追加</p>\n<pre><code class=\"hljs\">$ yarn add --dev &lt;package name&gt;</code></pre><h1>使い分けるメリット</h1>\n<p>dependenciesとdevDependenciesのどちらにインストールしても大して違いはありません。インストールしているパッケージが、製品に必要なパッケージなのか開発に必要なパッケージなのかを開発者が認識できるくらいです。</p>\n<h1>パッケージのインストール</h1>\n<p>package.jsonに書かれているパッケージをインストールするには次のコマンドを実行します。ライブラリ自体はnode_modules内にダウンロードされます。</p>\n<h2>npm</h2>\n<p>すべてインストール</p>\n<pre><code class=\"hljs\">$ npm install\n$ npm i // 省略形</code></pre><p>dependenciesのみインストール</p>\n<pre><code class=\"hljs\">$ npm install --production</code></pre><h2>yarn</h2>\n<p>すべてインストール</p>\n<pre><code class=\"hljs\">$ yarn install</code></pre><p>dependenciesのみインストール</p>\n<pre><code class=\"hljs\">$ yarn install --production</code></pre><p>yarnの場合は、通常環境変数のNODE_ENVを見て環境判別をしていて、NODE_ENVにproductionが設定されていればこのオプションがなくてもproduction用インストールがされます。</p>\n<h1>グローバルインストール</h1>\n<p>ちなみにグローバルインストールを実行した場合は、package.jsonには記録されません。パッケージはプロジェクトの外側のユーザー単位でインストールされます。</p>\n<h2>npm</h2>\n<pre><code class=\"hljs\">$ npm install --global\n$ npm i -g // 省略形</code></pre><h2>yarn</h2>\n<pre><code class=\"hljs\">$ yarn global add &lt;package name&gt;</code></pre>",
  "dir": "posts/json",
  "base": "20200424.json",
  "ext": ".json",
  "sourceBase": "20200424.md",
  "sourceExt": ".md"
}