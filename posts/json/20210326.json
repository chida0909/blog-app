{
  "title": "TypeScriptのインターフェース",
  "permalink": "typeScript-interface",
  "description": null,
  "created_at": "2021-03-27T00:00:00.000Z",
  "tags": "TypeScript",
  "bodyContent": "インターフェースとは、オブジェクトの型付けを行うことができる機能です。  \nメンバの変数やメソッドなどを一箇所で型付けすることができます。  \n  \nimplementsキーワードを使用して、classにインターフェースを実装します。  \nインターフェースを実装している場合、インターフェースに存在するメンバーと同じ名前のメンバーが必ず存在している必要があります。\n  \n```\ninterface PersonInterface {\n  name: string;\n  age: number;\n}\n\nclass PersonClass implements PersonInterface {\n  name = \"chida\";\n  age = 20;\n}\n\nconst person = new PersonClass();\nconsole.log(person.name, person.age); // chida 20\n```\n\n## 複数のインターフェースの実装\n\nインターフェースを実装する際に、インターフェース名をカンマで区切ると複数のインターフェースを実装できます。\n\n```\ninterface PersonNameInterface {\n  name: string;\n}\n\ninterface PersonAgeInterface {\n  age: number;\n}\n\nclass PersonClass implements PersonNameInterface, PersonAgeInterface {\n  name = \"chida\";\n  age = 20;\n}\n\nconst person = new PersonClass();\nconsole.log(person.name, person.age); // chida 20\n```\n\n## インターフェースの継承\n\nインターフェースはクラス同様にextendsキーワードを使用して継承することができます。\n\n```\ninterface PersonNameInterface {\n  name: string;\n}\n\ninterface PersonAgeInterface extends PersonNameInterface {\n  age: number;\n}\n\nclass PersonClass implements PersonAgeInterface {\n  name = \"chida\";\n  age = 20;\n}\n\nconst person = new PersonClass();\nconsole.log(person.name, person.age); // chida 20\n```",
  "bodyHtml": "<p>インターフェースとは、オブジェクトの型付けを行うことができる機能です。<br>\nメンバの変数やメソッドなどを一箇所で型付けすることができます。</p>\n<p>implementsキーワードを使用して、classにインターフェースを実装します。<br>\nインターフェースを実装している場合、インターフェースに存在するメンバーと同じ名前のメンバーが必ず存在している必要があります。</p>\n<pre><code>interface PersonInterface {\n  name: string;\n  age: number;\n}\n\nclass PersonClass implements PersonInterface {\n  name = &quot;chida&quot;;\n  age = 20;\n}\n\nconst person = new PersonClass();\nconsole.log(person.name, person.age); // chida 20\n</code></pre>\n<h2>複数のインターフェースの実装</h2>\n<p>インターフェースを実装する際に、インターフェース名をカンマで区切ると複数のインターフェースを実装できます。</p>\n<pre><code>interface PersonNameInterface {\n  name: string;\n}\n\ninterface PersonAgeInterface {\n  age: number;\n}\n\nclass PersonClass implements PersonNameInterface, PersonAgeInterface {\n  name = &quot;chida&quot;;\n  age = 20;\n}\n\nconst person = new PersonClass();\nconsole.log(person.name, person.age); // chida 20\n</code></pre>\n<h2>インターフェースの継承</h2>\n<p>インターフェースはクラス同様にextendsキーワードを使用して継承することができます。</p>\n<pre><code>interface PersonNameInterface {\n  name: string;\n}\n\ninterface PersonAgeInterface extends PersonNameInterface {\n  age: number;\n}\n\nclass PersonClass implements PersonAgeInterface {\n  name = &quot;chida&quot;;\n  age = 20;\n}\n\nconst person = new PersonClass();\nconsole.log(person.name, person.age); // chida 20\n</code></pre>\n",
  "dir": "posts/json",
  "base": "20210326.json",
  "ext": ".json",
  "sourceBase": "20210326.md",
  "sourceExt": ".md"
}