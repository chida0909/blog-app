{
  "title": "Vuexのコードを書いて学習する",
  "permalink": "vuex-code",
  "description": null,
  "created_at": "2020-04-23T00:00:00.000Z",
  "tags": "Vuex",
  "bodyContent": "# getters\n\n- gettersはStoreの状態を算出する時に使います  \n- プロパティスタイルアクセスは「this.$store.getters.hoge」と書く事ができます  \n- ゲッターは「this.$store.getters.hoge」オブジェクトから取り出され、プロパティとしてアクセスできます  \n- プロパティとしてアクセスされるゲッターは、キャッシュされます  \n\n## gettersでageが30以上だけ表示\n\n```js\nimport Vue from \"vue\"\nimport Vuex from \"vuex\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    users: [{ name: \"John\", age: 22 }, { name: \"Merry\", age: 33 }]\n  },\n  getters: {\n    users(state) {\n      return state.users.filter(user => user.age < 30)\n    }\n  }\n})\n```\n\n```vue\n<template>\n  <ul>\n    <li v-for=\"user in users\">{{ user.name }} ({{ user.age }})</li>\n  </ul>\n</template>\n\n<script>\nexport default {\n  computed: {\n    users() {\n      return this.$store.getters.users\n    }\n  }\n}\n</script>\n```\n\n# mutations\n- ミューテーションとは、ストアを更新するメソッドです  \n- ミューテーションはタイプとハンドラを持ちます  \n- ハンドラ関数はstateを第1引数として状態の変更を行います  \n- ミューテーションハンドラを起動するには「this.$store.commit(\"hoge\")」を呼び出す必要があります  \n\n## stateをmutationsで更新\n\n```js\nimport Vue from \"vue\"\nimport Vuex from \"vuex\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment(state) {\n      state.count = 2\n    }\n  }\n})\n```\n\n```vue\n<template>\n  <div>\n    <h1>{{ count }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {}\n  },\n  computed: {\n    count() {\n      this.$store.commit(\"increment\")\n      return this.$store.state.count\n    }\n  }\n}\n</script>\n```\n\n## stateをmutationsで更新(2)\nクリックでカウントアップします\n\n```js\nimport Vue from \"vue\"\nimport Vuex from \"vuex\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  // stateはVue.jsでいうところのdataです\n  state: {\n    count: 0\n  },\n  mutations: {\n    // カウントアップするミューテーションを登録\n    increment(state) {\n      state.count++\n    }\n  }\n})\n```\n\n```vue\n<template>\n  <div>\n    <button @click=\"increment\">UP</button>\n    <h1>Count:{{ count }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    // クリックイベントに合わせて、カウントアップするミューテーションを呼び出します\n    increment() {\n      this.$store.commit(\"increment\")\n    }\n  },\n  computed: {\n    count() {\n      // ストアの状態（count）を表示します\n      return this.$store.state.count\n    }\n  }\n}\n</script>\n```\n\n## クリックで数値を10ずつ増やす\npayloadでmutationsに値を渡します  \n\n\n```js\nimport Vue from \"vue\"\nimport Vuex from \"vuex\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment(state, number) {\n      state.count = state.count + number\n    }\n  }\n})\n```\n\n```vue\n<template>\n  <div>\n    <button @click=\"increment\">UP</button>\n    <h1>Count:{{ count }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\", 10)\n    }\n  },\n  computed: {\n    count() {\n      return this.$store.state.count\n    }\n  }\n}\n</script>\n```\n\n# Actions\n\n- アクションとはStoreを更新するメソッドです  \n- ミューテーションと似ていますが、下記の点で異なります  \n- アクションは状態を変更するのではなく、ミューテーションをコミットします  \n- アクションは任意の非同期処理を含むことができます  \n- context.commit('hoge')を呼び出すことでミューテーションをコミットできます。  \n- アクションは「this.$store.dispatch('hoge')」がトリガーとなって実行されます。  \n  \n全体の処理の流れとしては、コンポーネントからdispatchでアクションを呼び出し、アクション内で外部APIなどからの非同期処理を行った後、commitでミューテーションを使いステートを更新するという流れとなります。  \n  \n## Actionsでstateを更新\n1ずつカウントアップの処理で、Actionsを使いstateを更新します。\n  \n\n```js\nimport Vue from \"vue\"\nimport Vuex from \"vuex\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    increment(state) {\n      state.count++\n    }\n  },\n  actions: {\n    incrementOne(context) {\n      context.commit(\"increment\")\n    }\n  }\n})\n```\n\n\n```vue\n<template>\n  <div>\n    <button @click=\"increment\">UP</button>\n    <h1>Count:{{ count }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    increment() {\n      this.$store.dispatch(\"incrementOne\")\n    }\n  },\n  computed: {\n    count() {\n      return this.$store.state.count\n    }\n  }\n}\n</script>\n```\n\n## axiosで非同期通信\n無料サービスJSONPlaceholderを利用します\n  \nブラウザ上の画面\n```\nLeanne Graham\nErvin Howell\nClementine Bauch\nPatricia Lebsack\nChelsey Dietrich\n```\n  \n```js\nimport Vue from \"vue\"\nimport Vuex from \"vuex\"\nimport axios from \"axios\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    users: []\n  },\n  mutations: {\n    setUsers(state, users) {\n      state.users = users\n    }\n  },\n  actions: {\n    getUsers({ commit }) {\n      return axios\n        .get(\"https://jsonplaceholder.typicode.com/users\")\n        .then(response => {\n          commit(\"setUsers\", response.data)\n        })\n    }\n  }\n})\n```\n\n```vue\n<template>\n  <div id=\"app\">\n    <h1>ユーザ一覧</h1>\n    <div v-for=\"user in users\" :key=\"user.id\">{{ user.name }}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"app\",\n  computed: {\n    users() {\n      return this.$store.state.users\n    }\n  },\n  mounted() {\n    // elementへのマウントが行われた後処理されます\n    this.$store.dispatch(\"getUsers\")\n  }\n}\n</script>\n```\n\n# state\n\n## stateの値を取得して表示\n\nscriptタグを使わずにHello Vuexを表示します。\n\n```js\nimport Vue from \"vue\"\nimport Vuex from \"vuex\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    message: \"Hello Vuex\"\n  }\n})\n```\n\n```js\nimport Vue from \"vue\"\nimport App from \"./App\"\nimport store from \"./store\"\n\nnew Vue({\n  store,\n  render: h => h(App)\n}).$mount(\"#app\")\n```\n\n```vue\n<template>\n  <div>{{ $store.state.message }}</div>\n</template>\n```\n\n## stateの値を取得して表示(2)\n\nscriptを使って、数字の0を表示します。  \n\n\n```js\nimport Vue from \"vue\"\nimport App from \"./App\"\nimport store from \"./store\"\n\nnew Vue({\n  store,\n  render: h => h(App)\n}).$mount(\"#app\")\n```\n\n```js\nimport Vue from \"vue\"\nimport Vuex from \"vuex\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    count: 0\n  }\n})\n```\n\n```vue\n<template>\n  <div>\n    <h1>{{ count }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {}\n  },\n  computed: {\n    count() {\n      return this.$store.state.count\n    }\n  }\n}\n</script>\n```\n\n## stateに配列を用意して展開\n\n```vue\n<template>\n  <ul>\n    <li v-for=\"user in users\">{{ user.name }} ({{ user.age }})</li>\n  </ul>\n</template>\n\n<script>\nexport default {\n  computed: {\n    users() {\n      return this.$store.state.users\n    }\n  }\n}\n</script>\n```\n\n\n```js\nimport Vue from \"vue\"\nimport Vuex from \"vuex\"\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    users: [\n      { name: \"John\", age: 22 },\n      { name: \"Merry\", age: 33 }\n    ]\n  }\n})\n```\n\n# mapState\n\n```vue\n<template>\n  <div>\n    <h1>{{ count }}</h1>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\n\nexport default {\n  data() {\n    return {}\n  },\n  computed: {\n    ...mapState({\n      count: state => state.count\n    }),\n  }\n}\n</script>\n```",
  "bodyHtml": "<h1>getters</h1>\n<ul>\n<li>gettersはStoreの状態を算出する時に使います</li>\n<li>プロパティスタイルアクセスは「this.$store.getters.hoge」と書く事ができます</li>\n<li>ゲッターは「this.$store.getters.hoge」オブジェクトから取り出され、プロパティとしてアクセスできます</li>\n<li>プロパティとしてアクセスされるゲッターは、キャッシュされます</li>\n</ul>\n<h2>gettersでageが30以上だけ表示</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vuex\"</span>\n\nVue.use(Vuex)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-attr\">state</span>: {\n    <span class=\"hljs-attr\">users</span>: [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">22</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Merry\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">33</span> }]\n  },\n  <span class=\"hljs-attr\">getters</span>: {\n    users(state) {\n      <span class=\"hljs-keyword\">return</span> state.users.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =&gt;</span> user.age &lt; <span class=\"hljs-number\">30</span>)\n    }\n  }\n})</code></pre><pre><code class=\"hljs\">&lt;template&gt;\n  &lt;ul&gt;\n    &lt;li v-for=\"user in users\"&gt;{{ user.name }} ({{ user.age }})&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  computed: {\n    users() {\n      return this.$store.getters.users\n    }\n  }\n}\n&lt;/script&gt;</code></pre><h1>mutations</h1>\n<ul>\n<li>ミューテーションとは、ストアを更新するメソッドです</li>\n<li>ミューテーションはタイプとハンドラを持ちます</li>\n<li>ハンドラ関数はstateを第1引数として状態の変更を行います</li>\n<li>ミューテーションハンドラを起動するには「this.$store.commit(&quot;hoge&quot;)」を呼び出す必要があります</li>\n</ul>\n<h2>stateをmutationsで更新</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vuex\"</span>\n\nVue.use(Vuex)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-attr\">state</span>: {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\n  },\n  <span class=\"hljs-attr\">mutations</span>: {\n    increment(state) {\n      state.count = <span class=\"hljs-number\">2</span>\n    }\n  }\n})</code></pre><pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;{{ count }}&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {}\n  },\n  computed: {\n    count() {\n      this.$store.commit(\"increment\")\n      return this.$store.state.count\n    }\n  }\n}\n&lt;/script&gt;</code></pre><h2>stateをmutationsで更新(2)</h2>\n<p>クリックでカウントアップします</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vuex\"</span>\n\nVue.use(Vuex)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-comment\">// stateはVue.jsでいうところのdataです</span>\n  <span class=\"hljs-attr\">state</span>: {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\n  },\n  <span class=\"hljs-attr\">mutations</span>: {\n    <span class=\"hljs-comment\">// カウントアップするミューテーションを登録</span>\n    increment(state) {\n      state.count++\n    }\n  }\n})</code></pre><pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"increment\"&gt;UP&lt;/button&gt;\n    &lt;h1&gt;Count:{{ count }}&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    // クリックイベントに合わせて、カウントアップするミューテーションを呼び出します\n    increment() {\n      this.$store.commit(\"increment\")\n    }\n  },\n  computed: {\n    count() {\n      // ストアの状態（count）を表示します\n      return this.$store.state.count\n    }\n  }\n}\n&lt;/script&gt;</code></pre><h2>クリックで数値を10ずつ増やす</h2>\n<p>payloadでmutationsに値を渡します</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vuex\"</span>\n\nVue.use(Vuex)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-attr\">state</span>: {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\n  },\n  <span class=\"hljs-attr\">mutations</span>: {\n    increment(state, number) {\n      state.count = state.count + number\n    }\n  }\n})</code></pre><pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"increment\"&gt;UP&lt;/button&gt;\n    &lt;h1&gt;Count:{{ count }}&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    increment() {\n      this.$store.commit(\"increment\", 10)\n    }\n  },\n  computed: {\n    count() {\n      return this.$store.state.count\n    }\n  }\n}\n&lt;/script&gt;</code></pre><h1>Actions</h1>\n<ul>\n<li>アクションとはStoreを更新するメソッドです</li>\n<li>ミューテーションと似ていますが、下記の点で異なります</li>\n<li>アクションは状態を変更するのではなく、ミューテーションをコミットします</li>\n<li>アクションは任意の非同期処理を含むことができます</li>\n<li>context.commit('hoge')を呼び出すことでミューテーションをコミットできます。</li>\n<li>アクションは「this.$store.dispatch('hoge')」がトリガーとなって実行されます。</li>\n</ul>\n<p>全体の処理の流れとしては、コンポーネントからdispatchでアクションを呼び出し、アクション内で外部APIなどからの非同期処理を行った後、commitでミューテーションを使いステートを更新するという流れとなります。</p>\n<h2>Actionsでstateを更新</h2>\n<p>1ずつカウントアップの処理で、Actionsを使いstateを更新します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vuex\"</span>\n\nVue.use(Vuex)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-attr\">state</span>: {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\n  },\n  <span class=\"hljs-attr\">mutations</span>: {\n    increment(state) {\n      state.count++\n    }\n  },\n  <span class=\"hljs-attr\">actions</span>: {\n    incrementOne(context) {\n      context.commit(<span class=\"hljs-string\">\"increment\"</span>)\n    }\n  }\n})</code></pre><pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;button @click=\"increment\"&gt;UP&lt;/button&gt;\n    &lt;h1&gt;Count:{{ count }}&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  methods: {\n    increment() {\n      this.$store.dispatch(\"incrementOne\")\n    }\n  },\n  computed: {\n    count() {\n      return this.$store.state.count\n    }\n  }\n}\n&lt;/script&gt;</code></pre><h2>axiosで非同期通信</h2>\n<p>無料サービスJSONPlaceholderを利用します</p>\n<p>ブラウザ上の画面</p>\n<pre><code>Leanne Graham\nErvin Howell\nClementine Bauch\nPatricia Lebsack\nChelsey Dietrich\n</code></pre>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vuex\"</span>\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"axios\"</span>\n\nVue.use(Vuex)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-attr\">state</span>: {\n    <span class=\"hljs-attr\">users</span>: []\n  },\n  <span class=\"hljs-attr\">mutations</span>: {\n    setUsers(state, users) {\n      state.users = users\n    }\n  },\n  <span class=\"hljs-attr\">actions</span>: {\n    getUsers({ commit }) {\n      <span class=\"hljs-keyword\">return</span> axios\n        .get(<span class=\"hljs-string\">\"https://jsonplaceholder.typicode.com/users\"</span>)\n        .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> {\n          commit(<span class=\"hljs-string\">\"setUsers\"</span>, response.data)\n        })\n    }\n  }\n})</code></pre><pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;h1&gt;ユーザ一覧&lt;/h1&gt;\n    &lt;div v-for=\"user in users\" :key=\"user.id\"&gt;{{ user.name }}&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: \"app\",\n  computed: {\n    users() {\n      return this.$store.state.users\n    }\n  },\n  mounted() {\n    // elementへのマウントが行われた後処理されます\n    this.$store.dispatch(\"getUsers\")\n  }\n}\n&lt;/script&gt;</code></pre><h1>state</h1>\n<h2>stateの値を取得して表示</h2>\n<p>scriptタグを使わずにHello Vuexを表示します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vuex\"</span>\n\nVue.use(Vuex)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-attr\">state</span>: {\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"Hello Vuex\"</span>\n  }\n})</code></pre><pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./App\"</span>\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./store\"</span>\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  store,\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> h(App)\n}).$mount(<span class=\"hljs-string\">\"#app\"</span>)</code></pre><pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;{{ $store.state.message }}&lt;/div&gt;\n&lt;/template&gt;</code></pre><h2>stateの値を取得して表示(2)</h2>\n<p>scriptを使って、数字の0を表示します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./App\"</span>\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./store\"</span>\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  store,\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> h(App)\n}).$mount(<span class=\"hljs-string\">\"#app\"</span>)</code></pre><pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vuex\"</span>\n\nVue.use(Vuex)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-attr\">state</span>: {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>\n  }\n})</code></pre><pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;{{ count }}&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  data() {\n    return {}\n  },\n  computed: {\n    count() {\n      return this.$store.state.count\n    }\n  }\n}\n&lt;/script&gt;</code></pre><h2>stateに配列を用意して展開</h2>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;ul&gt;\n    &lt;li v-for=\"user in users\"&gt;{{ user.name }} ({{ user.age }})&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  computed: {\n    users() {\n      return this.$store.state.users\n    }\n  }\n}\n&lt;/script&gt;</code></pre><pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n<span class=\"hljs-keyword\">import</span> Vuex <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vuex\"</span>\n\nVue.use(Vuex)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-attr\">state</span>: {\n    <span class=\"hljs-attr\">users</span>: [\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">22</span> },\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Merry\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">33</span> }\n    ]\n  }\n})</code></pre><h1>mapState</h1>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;{{ count }}&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapState } from 'vuex'\n\nexport default {\n  data() {\n    return {}\n  },\n  computed: {\n    ...mapState({\n      count: state =&gt; state.count\n    }),\n  }\n}\n&lt;/script&gt;</code></pre>",
  "dir": "posts/json",
  "base": "20200423.json",
  "ext": ".json",
  "sourceBase": "20200423.md",
  "sourceExt": ".md"
}