{
  "title": "Nuxt.jsのmiddlewareを使う",
  "permalink": "nuxt-middleware-use",
  "description": "Nuxt.jsのMiddlewareを使うことで、レンダリングするよりも前に実行される関数を定義できます。",
  "created_at": "2020-04-03T00:00:00.000Z",
  "tags": "Nuxt",
  "bodyContent": "Nuxt.jsのMiddlewareを使うことで、レンダリングするよりも前に実行される関数を定義できます。  \n\n## nuxt.config.jsに定義\n実用性は皆無ですが、試しでMiddlewareの機能を使ってみます。  \n\nmiddlewareディレクトリにtest.jsを作成します。\n\nmiddleware/test.js\n```\nexport default function() {\n  console.log(\"test\")\n}\n```\n\nnuxt.config.jsにrouterを設定します。nuxt.config.jsで読み込ませると、すべての画面遷移時にミドルウェアが実行されるようになります。  \n\n```\nrouter: {\n  middleware: \"test\"\n}\n```\n\nこれで全てのページでレンダリングするよりも前にconsole.logにtestという文字が出ます。  \n\n## pagesに定義\n\nnuxt.config.jsではなく、pagesディレクトリ配下の.vueファイルに定義する場合は以下のとおりです。  \n\npages/index.vue  \n```\nexport default {\n  middleware: \"test\",\n}\n```\n\nMiddlewareは他にlayoutsディレクトリ配下の.vueにも定義できます。  \n実行順序は、nuxt.config.js → layouts → pagesの順になります。",
  "bodyHtml": "<p>Nuxt.jsのMiddlewareを使うことで、レンダリングするよりも前に実行される関数を定義できます。</p>\n<h2>nuxt.config.jsに定義</h2>\n<p>実用性は皆無ですが、試しでMiddlewareの機能を使ってみます。</p>\n<p>middlewareディレクトリにtest.jsを作成します。</p>\n<p>middleware/test.js</p>\n<pre><code>export default function() {\n  console.log(&quot;test&quot;)\n}\n</code></pre>\n<p>nuxt.config.jsにrouterを設定します。nuxt.config.jsで読み込ませると、すべての画面遷移時にミドルウェアが実行されるようになります。</p>\n<pre><code>router: {\n  middleware: &quot;test&quot;\n}\n</code></pre>\n<p>これで全てのページでレンダリングするよりも前にconsole.logにtestという文字が出ます。</p>\n<h2>pagesに定義</h2>\n<p>nuxt.config.jsではなく、pagesディレクトリ配下の.vueファイルに定義する場合は以下のとおりです。</p>\n<p>pages/index.vue</p>\n<pre><code>export default {\n  middleware: &quot;test&quot;,\n}\n</code></pre>\n<p>Middlewareは他にlayoutsディレクトリ配下の.vueにも定義できます。<br>\n実行順序は、nuxt.config.js → layouts → pagesの順になります。</p>\n",
  "dir": "posts/json",
  "base": "20200403.json",
  "ext": ".json",
  "sourceBase": "20200403.md",
  "sourceExt": ".md"
}