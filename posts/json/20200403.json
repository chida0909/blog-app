{
  "id": 4,
  "title": "middlewareを使い関数を実行する",
  "permalink": "nuxt-middleware-function",
  "description": "Nuxt.jsのMiddlewareを使うことで、レンダリングするよりも前に実行される関数を定義できます。",
  "created_at": "2020-04-03T00:00:00.000Z",
  "tags": "nuxt",
  "bodyContent": "Nuxt.jsのMiddlewareを使うことで、レンダリングするよりも前に実行される関数を定義できます。\n\n## nuxt.config.jsに定義\n実用性は皆無ですが、試しでMiddlewareの機能を使ってみます。\n\nmiddlewareディレクトリにtest.jsを作成します。\n```middleware/test.js\nexport default function() {\n  console.log(\"test\")\n}\n```\n\nnuxt.config.jsにrouterを設定します。nuxt.config.jsで読み込ませると、すべての画面遷移時にミドルウェアが実行されるようになります。\n\n```nuxt.config.js\nrouter: {\n  middleware: \"test\"\n}\n```\n\nこれで全てのページでレンダリングするよりも前にconsole.logにtestという文字が出ます。\n\n## pagesに定義\n\nnuxt.config.jsではなく、pagesディレクトリ配下の.vueファイルに定義する場合は以下のとおりです。\n\n```pages/index.vue\nexport default {\n  middleware: \"test\",\n}\n```\n\nMiddlewareは他にlayoutsにも定義できます。\n実行順序は、nuxt.config.js → layouts → pagesの順になります。",
  "bodyHtml": "<p>Nuxt.jsのMiddlewareを使うことで、レンダリングするよりも前に実行される関数を定義できます。</p>\n<h2>nuxt.config.jsに定義</h2>\n<p>実用性は皆無ですが、試しでMiddlewareの機能を使ってみます。</p>\n<p>middlewareディレクトリにtest.jsを作成します。</p>\n<pre><code class=\"hljs\">export default function() {\n  console.log(\"test\")\n}</code></pre><p>nuxt.config.jsにrouterを設定します。nuxt.config.jsで読み込ませると、すべての画面遷移時にミドルウェアが実行されるようになります。</p>\n<pre><code class=\"hljs\">router: {\n  middleware: \"test\"\n}</code></pre><p>これで全てのページでレンダリングするよりも前にconsole.logにtestという文字が出ます。</p>\n<h2>pagesに定義</h2>\n<p>nuxt.config.jsではなく、pagesディレクトリ配下の.vueファイルに定義する場合は以下のとおりです。</p>\n<pre><code class=\"hljs\">export default {\n  middleware: \"test\",\n}</code></pre><p>Middlewareは他にlayoutsにも定義できます。\n実行順序は、nuxt.config.js → layouts → pagesの順になります。</p>\n",
  "dir": "posts/json",
  "base": "20200403.json",
  "ext": ".json",
  "sourceBase": "20200403.md",
  "sourceExt": ".md"
}