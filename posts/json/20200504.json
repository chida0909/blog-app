{
  "title": "NuxtでVuexを使いユーザー認証を行う",
  "permalink": "nuxt-vuex-authenticated",
  "description": null,
  "created_at": "2020-05-04T00:00:00.000Z",
  "tags": "Vuex",
  "bodyContent": "前回は[Nuxt + Vuetify + Firebaseでログイン認証](/nuxt-vuetify-firebase)を参考にFirebaseでユーザーの認証までやりました。今回はVuexに認証状態を保持するところをやります。  \n\n注意点  \n- とても簡易的な実装なので、本番環境では使えません\n- バリデーションなど、フォームは作り込んでいません\n- DBの操作は行いません\n  \nディレクトリ構成は以下になります。\n```\n├── pages\n│   └── login.vue\n└── store\n    └── authenticated.js\n```\n\n# Vuexの各メソッド\n\n## state\nstateにデータを保存します。dataメソッドと同じような役割です。\n\n## getters\nそれぞれのpageでは、getterを使ってstateの値を呼び出します。computedプロパティと同じような役割です。\n\n## mutations\nstateを変更するメソッドです。storeは直接変更出来ず、必ずmutationsを介して変更します。mutationsはstore.commit('mutation名')で呼び出せます。\n\n## actions\nstateを変更するメソッドです。非同期処理の際に使います。actionsは、mutationにcommitメソッドを送ります。page側ではstore.dispatch('action名')で actionを呼び出します。\n\n# 1.Vuexのインストール\nまずは、Vuexをインストールします。\n\n```\n$ npm install --save-dev vuex\n```\n\n# 2.storeの作成\n次にstoreを作成します。Vuexのstoreには「モジュールモード」と「クラシックモード」がありますが、クラシックモードは廃止予定なのでモジュールモードで実装します。\n  \nNuxt.jsではstore/index.jsがストアインスタンスを返さない時、モジュールモードになります。そのためファイルは、store/authenticated.jsという名前で作成します。\n  \nstore/authenticated.js\n\n```js\nimport firebase from '@/plugins/firebase'\n\nexport const state = () => ({\n  isSignedIn: false\n})\n\nexport const mutations = {\n  setSignInState(state, isSignedIn){\n    state.isSignedIn = isSignedIn\n  }\n}\n\nexport const actions = {\n  signIn({ commit }, { email, password }){\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(user => {\n        commit('setSignInState', true)\n        console.log('OK')\n        this.$router.push('/')\n      })\n      .catch((error) => {\n        commit('setSignInState', false)\n        console.log('NG', error)\n    })\n  }\n}\n\nexport const getters = {\n  isAuthenticated: state => !!state.isSignedIn\n}\n```\nモードに関わらず、サーバーサイドで不要な共有状態を避けるため、stateの値は常にfunctionでなければなりません。\n  \nfirebaseにアクセスしてユーザー認証に成功した場合、$router.pushでindex.vueにページ遷移します。\n\n# 3.login.vueの編集\n前回作成した[login.vue](/nuxt-vuetify-firebase)は、以下のように書き換えます。\n\n```vue\n<template>\n  <v-app>\n    <v-form>\n      <v-text-field\n        v-model=\"email\"\n        label=\"email\"\n        required\n      >\n      </v-text-field>\n      <v-text-field\n        v-model=\"password\"\n        label=\"Password\"\n        required\n      >\n      </v-text-field>\n      <v-btn @click=\"submit\">\n        送信\n      </v-btn>\n    </v-form>\n  </v-app>\n</template>\n\n<script>\nimport { mapActions } from \"vuex\"\n\nexport default {\n  data() {\n    return {\n      email: null,\n      password: null\n    }\n  },\n  methods: {\n     ...mapActions({\n      submit() {\n        this.$store.dispatch(\"authenticated/signIn\", {\n          email: this.email,\n          password: this.password\n        })\n      }\n    })\n  }\n}\n</script>\n```\n\nこれで各ページからgetters使って、storeの値を呼び出せます。\n\n# 4.別ページでstoreを呼び出す\npages/login.vueではなく、別ページ（pages/index.vue）のasyncDataからstore.gettersを呼び出すには以下のように書きます。\n\n```js\nasyncData({store}) {\n  console.log( store.getters['authenticated/isAuthenticated'] )\n}\n```\n\n# 参考\n- [Vuex ストア - NuxtJS](https://ja.nuxtjs.org/guide/vuex-store/)\n- [Nuxt.jsのストアをモジュールモードで使用するときのTips](https://qiita.com/y-miine/items/028c73aa3f87e983ed4c)\n- [Vue.js + Vuex + VuetifyとFirebaseでSPAを作る](https://nmomos.com/tips/2019/11/23/vue-firebase-spa-4/)",
  "bodyHtml": "<p>前回は<a href=\"/nuxt-vuetify-firebase\">Nuxt + Vuetify + Firebaseでログイン認証</a>を参考にFirebaseでユーザーの認証までやりました。今回はVuexに認証状態を保持するところをやります。</p>\n<p>注意点</p>\n<ul>\n<li>とても簡易的な実装なので、本番環境では使えません</li>\n<li>バリデーションなど、フォームは作り込んでいません</li>\n<li>DBの操作は行いません</li>\n</ul>\n<p>ディレクトリ構成は以下になります。</p>\n<pre><code>├── pages\n│   └── login.vue\n└── store\n    └── authenticated.js\n</code></pre>\n<h1>Vuexの各メソッド</h1>\n<h2>state</h2>\n<p>stateにデータを保存します。dataメソッドと同じような役割です。</p>\n<h2>getters</h2>\n<p>それぞれのpageでは、getterを使ってstateの値を呼び出します。computedプロパティと同じような役割です。</p>\n<h2>mutations</h2>\n<p>stateを変更するメソッドです。storeは直接変更出来ず、必ずmutationsを介して変更します。mutationsはstore.commit('mutation名')で呼び出せます。</p>\n<h2>actions</h2>\n<p>stateを変更するメソッドです。非同期処理の際に使います。actionsは、mutationにcommitメソッドを送ります。page側ではstore.dispatch('action名')で actionを呼び出します。</p>\n<h1>1.Vuexのインストール</h1>\n<p>まずは、Vuexをインストールします。</p>\n<pre><code>$ npm install --save-dev vuex\n</code></pre>\n<h1>2.storeの作成</h1>\n<p>次にstoreを作成します。Vuexのstoreには「モジュールモード」と「クラシックモード」がありますが、クラシックモードは廃止予定なのでモジュールモードで実装します。</p>\n<p>Nuxt.jsではstore/index.jsがストアインスタンスを返さない時、モジュールモードになります。そのためファイルは、store/authenticated.jsという名前で作成します。</p>\n<p>store/authenticated.js</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> firebase <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/plugins/firebase'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> state = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> ({\n  <span class=\"hljs-attr\">isSignedIn</span>: <span class=\"hljs-literal\">false</span>\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> mutations = {\n  setSignInState(state, isSignedIn){\n    state.isSignedIn = isSignedIn\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> actions = {\n  signIn({ commit }, { email, password }){\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =&gt;</span> {\n        commit(<span class=\"hljs-string\">'setSignInState'</span>, <span class=\"hljs-literal\">true</span>)\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'OK'</span>)\n        <span class=\"hljs-keyword\">this</span>.$router.push(<span class=\"hljs-string\">'/'</span>)\n      })\n      .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> {\n        commit(<span class=\"hljs-string\">'setSignInState'</span>, <span class=\"hljs-literal\">false</span>)\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'NG'</span>, error)\n    })\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getters = {\n  <span class=\"hljs-attr\">isAuthenticated</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =&gt;</span> !!state.isSignedIn\n}</code></pre><p>モードに関わらず、サーバーサイドで不要な共有状態を避けるため、stateの値は常にfunctionでなければなりません。</p>\n<p>firebaseにアクセスしてユーザー認証に成功した場合、$router.pushでindex.vueにページ遷移します。</p>\n<h1>3.login.vueの編集</h1>\n<p>前回作成した<a href=\"/nuxt-vuetify-firebase\">login.vue</a>は、以下のように書き換えます。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;v-app&gt;\n    &lt;v-form&gt;\n      &lt;v-text-field\n        v-model=\"email\"\n        label=\"email\"\n        required\n      &gt;\n      &lt;/v-text-field&gt;\n      &lt;v-text-field\n        v-model=\"password\"\n        label=\"Password\"\n        required\n      &gt;\n      &lt;/v-text-field&gt;\n      &lt;v-btn @click=\"submit\"&gt;\n        送信\n      &lt;/v-btn&gt;\n    &lt;/v-form&gt;\n  &lt;/v-app&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { mapActions } from \"vuex\"\n\nexport default {\n  data() {\n    return {\n      email: null,\n      password: null\n    }\n  },\n  methods: {\n     ...mapActions({\n      submit() {\n        this.$store.dispatch(\"authenticated/signIn\", {\n          email: this.email,\n          password: this.password\n        })\n      }\n    })\n  }\n}\n&lt;/script&gt;</code></pre><p>これで各ページからgetters使って、storeの値を呼び出せます。</p>\n<h1>4.別ページでstoreを呼び出す</h1>\n<p>pages/login.vueではなく、別ページ（pages/index.vue）のasyncDataからstore.gettersを呼び出すには以下のように書きます。</p>\n<pre><code class=\"hljs\">asyncData({store}) {\n  <span class=\"hljs-built_in\">console</span>.log( store.getters[<span class=\"hljs-string\">'authenticated/isAuthenticated'</span>] )\n}</code></pre><h1>参考</h1>\n<ul>\n<li><a href=\"https://ja.nuxtjs.org/guide/vuex-store/\">Vuex ストア - NuxtJS</a></li>\n<li><a href=\"https://qiita.com/y-miine/items/028c73aa3f87e983ed4c\">Nuxt.jsのストアをモジュールモードで使用するときのTips</a></li>\n<li><a href=\"https://nmomos.com/tips/2019/11/23/vue-firebase-spa-4/\">Vue.js + Vuex + VuetifyとFirebaseでSPAを作る</a></li>\n</ul>\n",
  "dir": "posts/json",
  "base": "20200504.json",
  "ext": ".json",
  "sourceBase": "20200504.md",
  "sourceExt": ".md"
}