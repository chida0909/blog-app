{
  "title": "JSでカレンダーの初週の配列を操作",
  "permalink": "js-calendar-array",
  "description": null,
  "created_at": "2020-04-15T00:00:00.000Z",
  "tags": "JavaScript",
  "bodyContent": "JSでライブラリを使わずに、カレンダーアプリを作成した時の備忘録です。\n  \nブログタイトルで「カレンダーの初週の配列を操作」と書きましたが、例えば「日曜:0」「月曜:1」「火曜:2」...と曜日に番号を振るとします（日曜始まり）\n  \n2020年4月のカレンダーで4月1日は「水曜:3」なので、4月の初週で不要な曜日（日~火）までの曜日番号を取得して、その日は空文字を挿入します。\n  \nそうすることで、4月1日は水曜からというカレンダーを作成できます。\n  \n![カレンダー](http://192.168.0.72:3333/images/carendar.png)\n  \n以下はその時に使ったコードの一部です。\n  \n```js\n// 2020年4月の場合\nconst firstDay = new Date(2020, 4 - 1, 1).getDay()\nconst lastDate = new Date(2020, 4, 0).getDate()\n\n// 初週の不要な日付と、4月の日付を取得する\nconst dayArray = [\n  [...Array(firstDay)].map(i => \"\"),\n  [...Array(lastDate)].map((_, i) => i + 1)\n]\n\n// 先ほどの処理結果を1つにまとめる\nconst days = dayArray.reduce((accumulator, current) => {\n  accumulator.push(...current)\n  return accumulator\n}, [])\n\n// 初週で不要な曜日（日~火）を空文字にし、1~29日までの日付を出力\nconsole.log(days) // [\"\", \"\", \"\", 1, 2, 3...29]\n```\n  \n上から順にコードを分解しながら見てみます。\n\n## Dateオブジェクト\n\nDateオブジェクトは、JavaScriptに標準で用意されている組み込みオブジェクトです。日付や時間などを扱うために使われます。特徴は次の通りです。\n\n- new演算子によりインスタンス化して使います。\n- 引数の指定がない場合、現在日時でDateオブジェクトを生成します。\n- 引数が指定されていない場合、日には1、それ以外には0が設定されます。\n- 月は数値が0から始まります。\n- 引数の指定はyear, month, date, hours, minutes, secoundsの順です。\n  \n```js\nnew Date() // Tue Apr 21 2020 23:51:12 GMT+0900 (日本標準時)\nnew Date(2020, 4 - 1, 1) // Wed Apr 01 2020 00:00:00 GMT+0900 (日本標準時)\nnew Date(2020, 4 - 1, 1, 20, 30, 5) // Wed Apr 01 2020 20:30:05 GMT+0900 (日本標準時)\n```\n\nインスタンス化する理由は、日付情報は常に変わるため、特定の瞬間の時刻情報で固定する必要があります。new演算子を使うことで初期化処理がされ、コード実行時点での日付時刻情報がセットされた変数を用意することができます。\n  \nまた、DateオブジェクトはgetDayやgetDateなどのメソッドを使うことが出来ます。\n  \n- getDayメソッドは、指定された日時の曜日(0–6)を返します\n- getDateメソッドは、指定された日時の日(1–31)を返します\n- getDateメソッドで月末を求める場合は、月に取得対象の月の翌月を、日に0を指定します\n  \n```js\nnew Date(2020, 4 - 1, 1).getDay() // 3\n\n// 4月の末が何日かを求めた結果です。\nnew Date(2020, 4, 0).getDate() // 30\n```\n\n## スプレッド構文\n  \nスプレッド構文が使われている箇所があります。スプレッド構文を使うと、Array.prototype.concat()相当のことが簡潔にかけます。\n  \n```js\n// ...Arrayの確認\nconsole.log( ...Array(3) ) // undefined undefined undefined\n\n// ...Arrayにmapを使う\nconsole.log( [...Array(3)].map(i => \"\") ) // [\"\", \"\", \"\"]\n\n// ...Arrayのindexを取得\nconsole.log( [...Array(3)].map( (_, i) => i ) ) // [0, 1, 2]\n```\n\n## reduceメソッド\n  \n二次元配列を一次元配列にして返してくれます。\n  \n```js\nconst dayArray = [[\"\", \"\", \"\"], [1, 2, 3]]\n\nconst days = dayArray.reduce((accumulator, current) => {\n  accumulator.push(...current)\n  return accumulator\n}, [])\n\nconsole.log(days) // [\"\", \"\", \"\", 1, 2, 3]\n```",
  "bodyHtml": "<p>JSでライブラリを使わずに、カレンダーアプリを作成した時の備忘録です。</p>\n<p>ブログタイトルで「カレンダーの初週の配列を操作」と書きましたが、例えば「日曜:0」「月曜:1」「火曜:2」...と曜日に番号を振るとします（日曜始まり）</p>\n<p>2020年4月のカレンダーで4月1日は「水曜:3」なので、4月の初週で不要な曜日（日~火）までの曜日番号を取得して、その日は空文字を挿入します。</p>\n<p>そうすることで、4月1日は水曜からというカレンダーを作成できます。</p>\n<p><img src=\"http://192.168.0.72:3333/images/carendar.png\" alt=\"カレンダー\"></p>\n<p>以下はその時に使ったコードの一部です。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// 2020年4月の場合</span>\n<span class=\"hljs-keyword\">const</span> firstDay = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2020</span>, <span class=\"hljs-number\">4</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>).getDay()\n<span class=\"hljs-keyword\">const</span> lastDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2020</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>).getDate()\n\n<span class=\"hljs-comment\">// 初週の不要な日付と、4月の日付を取得する</span>\n<span class=\"hljs-keyword\">const</span> dayArray = [\n  [...Array(firstDay)].map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =&gt;</span> <span class=\"hljs-string\">\"\"</span>),\n  [...Array(lastDate)].map(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =&gt;</span> i + <span class=\"hljs-number\">1</span>)\n]\n\n<span class=\"hljs-comment\">// 先ほどの処理結果を1つにまとめる</span>\n<span class=\"hljs-keyword\">const</span> days = dayArray.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, current</span>) =&gt;</span> {\n  accumulator.push(...current)\n  <span class=\"hljs-keyword\">return</span> accumulator\n}, [])\n\n<span class=\"hljs-comment\">// 初週で不要な曜日（日~火）を空文字にし、1~29日までの日付を出力</span>\n<span class=\"hljs-built_in\">console</span>.log(days) <span class=\"hljs-comment\">// [\"\", \"\", \"\", 1, 2, 3...29]</span></code></pre><p>上から順にコードを分解しながら見てみます。</p>\n<h2>Dateオブジェクト</h2>\n<p>Dateオブジェクトは、JavaScriptに標準で用意されている組み込みオブジェクトです。日付や時間などを扱うために使われます。特徴は次の通りです。</p>\n<ul>\n<li>new演算子によりインスタンス化して使います。</li>\n<li>引数の指定がない場合、現在日時でDateオブジェクトを生成します。</li>\n<li>引数が指定されていない場合、日には1、それ以外には0が設定されます。</li>\n<li>月は数値が0から始まります。</li>\n<li>引数の指定はyear, month, date, hours, minutes, secoundsの順です。</li>\n</ul>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>() <span class=\"hljs-comment\">// Tue Apr 21 2020 23:51:12 GMT+0900 (日本標準時)</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2020</span>, <span class=\"hljs-number\">4</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// Wed Apr 01 2020 00:00:00 GMT+0900 (日本標準時)</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2020</span>, <span class=\"hljs-number\">4</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">5</span>) <span class=\"hljs-comment\">// Wed Apr 01 2020 20:30:05 GMT+0900 (日本標準時)</span></code></pre><p>インスタンス化する理由は、日付情報は常に変わるため、特定の瞬間の時刻情報で固定する必要があります。new演算子を使うことで初期化処理がされ、コード実行時点での日付時刻情報がセットされた変数を用意することができます。</p>\n<p>また、DateオブジェクトはgetDayやgetDateなどのメソッドを使うことが出来ます。</p>\n<ul>\n<li>getDayメソッドは、指定された日時の曜日(0–6)を返します</li>\n<li>getDateメソッドは、指定された日時の日(1–31)を返します</li>\n<li>getDateメソッドで月末を求める場合は、月に取得対象の月の翌月を、日に0を指定します</li>\n</ul>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2020</span>, <span class=\"hljs-number\">4</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>).getDay() <span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-comment\">// 4月の末が何日かを求めた結果です。</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2020</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>).getDate() <span class=\"hljs-comment\">// 30</span></code></pre><h2>スプレッド構文</h2>\n<p>スプレッド構文が使われている箇所があります。スプレッド構文を使うと、Array.prototype.concat()相当のことが簡潔にかけます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// ...Arrayの確認</span>\n<span class=\"hljs-built_in\">console</span>.log( ...Array(<span class=\"hljs-number\">3</span>) ) <span class=\"hljs-comment\">// undefined undefined undefined</span>\n\n<span class=\"hljs-comment\">// ...Arrayにmapを使う</span>\n<span class=\"hljs-built_in\">console</span>.log( [...Array(<span class=\"hljs-number\">3</span>)].map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =&gt;</span> <span class=\"hljs-string\">\"\"</span>) ) <span class=\"hljs-comment\">// [\"\", \"\", \"\"]</span>\n\n<span class=\"hljs-comment\">// ...Arrayのindexを取得</span>\n<span class=\"hljs-built_in\">console</span>.log( [...Array(<span class=\"hljs-number\">3</span>)].map( <span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =&gt;</span> i ) ) <span class=\"hljs-comment\">// [0, 1, 2]</span></code></pre><h2>reduceメソッド</h2>\n<p>二次元配列を一次元配列にして返してくれます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> dayArray = [[<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"\"</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]]\n\n<span class=\"hljs-keyword\">const</span> days = dayArray.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, current</span>) =&gt;</span> {\n  accumulator.push(...current)\n  <span class=\"hljs-keyword\">return</span> accumulator\n}, [])\n\n<span class=\"hljs-built_in\">console</span>.log(days) <span class=\"hljs-comment\">// [\"\", \"\", \"\", 1, 2, 3]</span></code></pre>",
  "dir": "posts/json",
  "base": "20200415.json",
  "ext": ".json",
  "sourceBase": "20200415.md",
  "sourceExt": ".md"
}