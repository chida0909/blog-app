{
  "title": "Vue.jsのVNodeについて",
  "permalink": "vue-vnode",
  "description": null,
  "created_at": "2020-05-24T00:00:00.000Z",
  "tags": "Vue",
  "bodyContent": "仕事で\bAtomic Designにおける、Atomsの粒度でComponentを作ろうと話しになり、そこで気になるコードを見つけたので自分用のメモです。特に気になったのが、VNode・render関数についてです。\n  \n# 簡単なコード\n以下のコードはボタンをクリックで、要素を表示/非表示の切り替えを行えます。\n  \napp.vue\n```vue\n<template>\n  <v-app>\n    <button @click=\"clickButton()\">クリック</button>\n    <base-text-box :hidden=\"alert\"></base-text-box>\n  </v-app>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport BaseTextBox from '@/components/object/BaseTextBox'\n\nexport default Vue.extend({\n  components: {\n    BaseTextBox\n  },\n  data() {\n    return {\n      alert: false\n    }\n  },\n  methods: {\n    clickButton() {\n      console.log('button clicked!!')\n      this.alert = !this.alert\n    }\n  }\n})\n</script>\n```\n\nBaseTextBox.ts\n```ts\nimport Vue, { VNode } from 'vue'\n\nexport default Vue.extend({\n  props: {\n    hidden: Boolean\n  },\n  render(h): VNode {\n    if (!this.hidden) {\n      return h('span', 'Hello')\n    }\n    return h()\n  }\n})\n```\n\n# render\n\nVue.jsの場合コンポーネントは、templateタグ内にHTMLを記述することで、ブラウザ上にコンテンツを表示させることが出来ます。  \n\nrender関数も同様、HTMLをブラウザに表示させることが出来る関数です。  \n[公式サイト](https://jp.vuejs.org/v2/guide/render-function.html#ノード、ツリー、および仮想-DOM)によると、render関数の出力結果は次の通りになります。\n\n```js\nrender: function (createElement) {\n  return createElement('h1', this.blogTitle)\n}\n```\n\n```html\n<h1>{{ blogTitle }}</h1>\n```\n\n以下、引用です。  \nこのcreateElementは、実際に何を返しているのでしょうか？正確には実際のDOM要素ではありません。どのノードを描画するかを記述した情報が子ノードの記述を含んでVueに含まれているため、より正確にはcreateNodeDescriptionという名前になります。このノード記述は仮想ノードと呼ばれ、通常はVNodeと略されます。仮想DOMは、Vueコンポーネントのツリーで構築されたVNodeのツリー全体と呼んでいるものです。\n  \nVue.jsがTypeScriptをサポートをするために、この記述が存在しているようです。  \n[戻り値の型にアノテーションをつける](https://jp.vuejs.org/v2/guide/typescript.html#戻り値の型にアノテーションをつける)  \n  \n# その他\n\n## render関数\n\n```ts\nrender(h): VNode {}\n```\nrenderの次にVNodeと明示しているのはあまり見慣れないですが、これはTSの型の明示です。\n\n## 属性の追加\n\n```ts\nconst data = { class: {\n  foo: 'test_1',\n  bar: 'test_2'\n} }\nreturn h('span', data, 'クリックしました')\n```\nこのように、第二引数にオブジェクトを定義すると、class名を複数定義することが出来ます。\n\n## pタグを内包するdivタグ\n\n```ts\nrender(h): VNode {\n  return this.$createElement('div', { class: 'bar' }, [\n    this.$createElement('p', {}, ['foo'])\n  ])\n}\n```\n\n```html\n<div class=\"bar\">\n  <p>foo</p>\n</div>\n```\n\n参考：[Vue.js2.0のrenderについて試してみた](https://qiita.com/kazupon/items/2cc9a3427f468866d6dd)\n\n## トランジション\nVueは、transition ラッパーコンポーネントを提供しています。以下のように書くだけで、トランザクションを表現できます。\n\n```html\n<transition name=\"fade\">\n  <p v-if=\"show\">hello</p>\n</transition>\n```\n\ntsで書いたコードは次のとおりです。\n\n```ts\nimport '@/assets/sass/component/alert_box.scss'\n\nimport Vue, { VNode, VNodeChildren } from 'vue'\n\nexport default Vue.extend({\n  props: {\n    hidden: Boolean\n  },\n  render(h): VNode {\n    const alert = this.$createElement( 'span',  { class: 'foo' }, this.$slots.default)\n    const children: VNodeChildren = []\n    if (this.hidden) {\n      children.push(alert)\n    }\n    const element = this.$createElement('transition', { props: { name: 'fade' } }, children)\n    const result: VNode[] = [element]\n    console.log()\n    return h('div', {}, result)\n  }\n})\n```\n\n```scss\n.fade-enter-active, .fade-leave-active {\n  transition: opacity 3s;\n}\n.fade-enter, .fade-leave-to {\n  opacity: 0;\n}\n```\n参考：[単一要素-コンポーネントのトランジション](https://jp.vuejs.org/v2/guide/transitions.html#単一要素-コンポーネントのトランジション)\n  \n色々と書きましたが、render関数の使い方は以下の記事が参考になりそうです。\n[これでわかるvue.jsのrender関数](https://reffect.co.jp/vue/vue-js-render)",
  "bodyHtml": "<p>仕事で\bAtomic Designにおける、Atomsの粒度でComponentを作ろうと話しになり、そこで気になるコードを見つけたので自分用のメモです。特に気になったのが、VNode・render関数についてです。</p>\n<h1>簡単なコード</h1>\n<p>以下のコードはボタンをクリックで、要素を表示/非表示の切り替えを行えます。</p>\n<p>app.vue</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;v-app&gt;\n    &lt;button @click=&quot;clickButton()&quot;&gt;クリック&lt;/button&gt;\n    &lt;base-text-box :hidden=&quot;alert&quot;&gt;&lt;/base-text-box&gt;\n  &lt;/v-app&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot;&gt;\nimport Vue from &#x27;vue&#x27;\nimport BaseTextBox from &#x27;@/components/object/BaseTextBox&#x27;\n\nexport default Vue.extend({\n  components: {\n    BaseTextBox\n  },\n  data() {\n    return {\n      alert: false\n    }\n  },\n  methods: {\n    clickButton() {\n      console.log(&#x27;button clicked!!&#x27;)\n      this.alert = !this.alert\n    }\n  }\n})\n&lt;/script&gt;</code></pre><p>BaseTextBox.ts</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> Vue, { VNode } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Vue.extend({\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">hidden</span>: <span class=\"hljs-built_in\">Boolean</span>\n  },\n  render(h): VNode {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.hidden) {\n      <span class=\"hljs-keyword\">return</span> h(<span class=\"hljs-string\">&#x27;span&#x27;</span>, <span class=\"hljs-string\">&#x27;Hello&#x27;</span>)\n    }\n    <span class=\"hljs-keyword\">return</span> h()\n  }\n})</code></pre><h1>render</h1>\n<p>Vue.jsの場合コンポーネントは、templateタグ内にHTMLを記述することで、ブラウザ上にコンテンツを表示させることが出来ます。</p>\n<p>render関数も同様、HTMLをブラウザに表示させることが出来る関数です。<br>\n<a href=\"https://jp.vuejs.org/v2/guide/render-function.html#%E3%83%8E%E3%83%BC%E3%83%89%E3%80%81%E3%83%84%E3%83%AA%E3%83%BC%E3%80%81%E3%81%8A%E3%82%88%E3%81%B3%E4%BB%AE%E6%83%B3-DOM\">公式サイト</a>によると、render関数の出力結果は次の通りになります。</p>\n<pre><code class=\"hljs\">render: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">createElement</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> createElement(<span class=\"hljs-string\">&#x27;h1&#x27;</span>, <span class=\"hljs-built_in\">this</span>.blogTitle)\n}</code></pre><pre><code class=\"hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{ blogTitle }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></code></pre><p>以下、引用です。<br>\nこのcreateElementは、実際に何を返しているのでしょうか？正確には実際のDOM要素ではありません。どのノードを描画するかを記述した情報が子ノードの記述を含んでVueに含まれているため、より正確にはcreateNodeDescriptionという名前になります。このノード記述は仮想ノードと呼ばれ、通常はVNodeと略されます。仮想DOMは、Vueコンポーネントのツリーで構築されたVNodeのツリー全体と呼んでいるものです。</p>\n<p>Vue.jsがTypeScriptをサポートをするために、この記述が存在しているようです。<br>\n<a href=\"https://jp.vuejs.org/v2/guide/typescript.html#%E6%88%BB%E3%82%8A%E5%80%A4%E3%81%AE%E5%9E%8B%E3%81%AB%E3%82%A2%E3%83%8E%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B\">戻り値の型にアノテーションをつける</a></p>\n<h1>その他</h1>\n<h2>render関数</h2>\n<pre><code class=\"hljs\">render(h): VNode {}</code></pre><p>renderの次にVNodeと明示しているのはあまり見慣れないですが、これはTSの型の明示です。</p>\n<h2>属性の追加</h2>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> data = { <span class=\"hljs-attr\">class</span>: {\n  <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;test_1&#x27;</span>,\n  <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">&#x27;test_2&#x27;</span>\n} }\n<span class=\"hljs-keyword\">return</span> h(<span class=\"hljs-string\">&#x27;span&#x27;</span>, data, <span class=\"hljs-string\">&#x27;クリックしました&#x27;</span>)</code></pre><p>このように、第二引数にオブジェクトを定義すると、class名を複数定義することが出来ます。</p>\n<h2>pタグを内包するdivタグ</h2>\n<pre><code class=\"hljs\">render(h): VNode {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.$createElement(<span class=\"hljs-string\">&#x27;div&#x27;</span>, { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span> }, [\n    <span class=\"hljs-built_in\">this</span>.$createElement(<span class=\"hljs-string\">&#x27;p&#x27;</span>, {}, [<span class=\"hljs-string\">&#x27;foo&#x27;</span>])\n  ])\n}</code></pre><pre><code class=\"hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bar&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>foo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre><p>参考：<a href=\"https://qiita.com/kazupon/items/2cc9a3427f468866d6dd\">Vue.js2.0のrenderについて試してみた</a></p>\n<h2>トランジション</h2>\n<p>Vueは、transition ラッパーコンポーネントを提供しています。以下のように書くだけで、トランザクションを表現できます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;fade&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;show&quot;</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span></code></pre><p>tsで書いたコードは次のとおりです。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;@/assets/sass/component/alert_box.scss&#x27;</span>\n\n<span class=\"hljs-keyword\">import</span> Vue, { VNode, VNodeChildren } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Vue.extend({\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">hidden</span>: <span class=\"hljs-built_in\">Boolean</span>\n  },\n  render(h): VNode {\n    <span class=\"hljs-keyword\">const</span> alert = <span class=\"hljs-built_in\">this</span>.$createElement( <span class=\"hljs-string\">&#x27;span&#x27;</span>,  { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&#x27;foo&#x27;</span> }, <span class=\"hljs-built_in\">this</span>.$slots.default)\n    <span class=\"hljs-keyword\">const</span> children: VNodeChildren = []\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.hidden) {\n      children.push(alert)\n    }\n    <span class=\"hljs-keyword\">const</span> element = <span class=\"hljs-built_in\">this</span>.$createElement(<span class=\"hljs-string\">&#x27;transition&#x27;</span>, { <span class=\"hljs-attr\">props</span>: { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;fade&#x27;</span> } }, children)\n    <span class=\"hljs-keyword\">const</span> result: VNode[] = [element]\n    <span class=\"hljs-built_in\">console</span>.log()\n    <span class=\"hljs-keyword\">return</span> h(<span class=\"hljs-string\">&#x27;div&#x27;</span>, {}, result)\n  }\n})</code></pre><pre><code class=\"hljs\"><span class=\"hljs-selector-class\">.fade-enter-active</span>, <span class=\"hljs-selector-class\">.fade-leave-active</span> {\n  <span class=\"hljs-attribute\">transition</span>: opacity <span class=\"hljs-number\">3s</span>;\n}\n<span class=\"hljs-selector-class\">.fade-enter</span>, <span class=\"hljs-selector-class\">.fade-leave-to</span> {\n  <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;\n}</code></pre><p>参考：<a href=\"https://jp.vuejs.org/v2/guide/transitions.html#%E5%8D%98%E4%B8%80%E8%A6%81%E7%B4%A0-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B8%E3%82%B7%E3%83%A7%E3%83%B3\">単一要素-コンポーネントのトランジション</a></p>\n<p>色々と書きましたが、render関数の使い方は以下の記事が参考になりそうです。\n<a href=\"https://reffect.co.jp/vue/vue-js-render\">これでわかるvue.jsのrender関数</a></p>\n",
  "dir": "posts/json",
  "base": "20200524.json",
  "ext": ".json",
  "sourceBase": "20200524.md",
  "sourceExt": ".md"
}