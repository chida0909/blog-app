{
  "title": "Vuetifyでページネーションの実装",
  "permalink": "vuetify-pagination",
  "description": null,
  "created_at": "2020-04-28T00:00:00.000Z",
  "tags": "Vuetify",
  "bodyContent": "NuxtとVuetifyでページネーションの実装をした時の備忘録です。実装サンプルは[コチラ](./sample/pagination)です。\n  \nファイルパスは以下になります。\n```\n├── components\n│   └── PagiNation.vue\n└── pages\n    └── index.vue\n```\n\nページネーションはVuetifyの[v-pagination](https://vuetifyjs.com/ja/components/paginations/)コンポーネントを利用します。\n\n# PagiNation.vue\nまずはページネーション用のコンポーネントを作成します。\n  \n```vue\n<template>\n  <v-container>\n    <v-row justify=\"center\">\n      <v-col cols=\"8\">\n        <v-container class=\"max-width\">\n          <v-pagination\n            v-model=\"dataCurrent\"\n            class=\"my-4\"\n            :length=\"pageLength\"\n            @input=\"dataChange\"\n          ></v-pagination>\n        </v-container>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  props: {\n    pageCurrent: Number, // 現在のページ数\n    pageLength: Number,  // 全体のページの数\n    pageChange: Function // ページ遷移時の処理\n  },\n  data() {\n    return {\n      dataChange: this.pageChange,\n      dataCurrent: this.pageCurrent\n    }\n  }\n}\n</script>\n```\n\ndataメソッドを用意して、オブジェクトを作成します。その際にオブジェクトのkey（dataChange）とvalueは（pageChange）は、別名を定義しないと以下のエラーが出ます。\n\n```\ndirectly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \"pageChange\"\n```\n\n# index.vue\n次にページネーションを表示させるページです。\n\n```vue\n<template>\n  <v-app>\n    <span\n      v-for=\"content in contents\"\n      :key=\"content.id\"\n    >\n      {{content.title}}\n    </span>\n    <PagiNation\n      :pageCurrent=\"pageCurrent\"\n      :pageLength=\"pageLength\"\n      :pageChange=\"pageChange\"\n    />\n  </v-app>\n</template>\n\n<script>\nimport PagiNation from '@/components/PagiNation.vue'\nexport default {\n  components: {\n    PagiNation\n  },\n  data() {\n    return {\n      pageCurrent: 1, // 初期表示は1から始める\n      pageLength: 0,\n      maxCount: 3\n    }\n  },\n  asyncData(context) {\n    let contents = [\n      { id: 0, title: 'hoge0'},\n      { id: 1, title: 'hoge1'},\n      { id: 2, title: 'hoge2'},\n      { id: 3, title: 'hoge3'},\n      { id: 4, title: 'hoge4'},\n      { id: 5, title: 'hoge5'}\n    ]\n    // ページ内に表示する最大コンテンツ数\n    const MAX_COUNT = 3\n    // 全体のページ数を取得\n    const pageLength = Math.ceil(contents.length / MAX_COUNT)\n    // ページング処理に使うため、全てのコンテンツ情報を保持\n    const contentsAll = contents\n\n    return {\n      contents,\n      pageLength,\n      contentsAll\n    }\n  },\n  methods: {\n    pageChange( pageNumber ) {\n      this.contents = this.contentsAll\n      const startCount = pageNumber === 1 ? 0 : ( pageNumber - 1 ) * this.maxCount\n      const endCount = pageNumber * this.maxCount\n      this.contents = this.contents.slice( startCount, endCount )\n    }\n  },\n  mounted() {\n    // Vueの要素がマウントされた後、最初のコンテンツの表示を確定させる処理\n    this.contents = this.contents.slice( 0, this.maxCount )\n  }\n}\n</script>\n```\n\nthisはVueの要素にマウントしてからでないと使えないため、asyncData内にthisを定義する事ができません（undefinedになります）そのため、asyncData内の変数maxCountはthisを使わずに定義しています。",
  "bodyHtml": "<p>NuxtとVuetifyでページネーションの実装をした時の備忘録です。実装サンプルは<a href=\"./sample/pagination\">コチラ</a>です。</p>\n<p>ファイルパスは以下になります。</p>\n<pre><code>├── components\n│   └── PagiNation.vue\n└── pages\n    └── index.vue\n</code></pre>\n<p>ページネーションはVuetifyの<a href=\"https://vuetifyjs.com/ja/components/paginations/\">v-pagination</a>コンポーネントを利用します。</p>\n<h1>PagiNation.vue</h1>\n<p>まずはページネーション用のコンポーネントを作成します。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;v-container&gt;\n    &lt;v-row justify=&quot;center&quot;&gt;\n      &lt;v-col cols=&quot;8&quot;&gt;\n        &lt;v-container class=&quot;max-width&quot;&gt;\n          &lt;v-pagination\n            v-model=&quot;dataCurrent&quot;\n            class=&quot;my-4&quot;\n            :length=&quot;pageLength&quot;\n            @input=&quot;dataChange&quot;\n          &gt;&lt;/v-pagination&gt;\n        &lt;/v-container&gt;\n      &lt;/v-col&gt;\n    &lt;/v-row&gt;\n  &lt;/v-container&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  props: {\n    pageCurrent: Number, // 現在のページ数\n    pageLength: Number,  // 全体のページの数\n    pageChange: Function // ページ遷移時の処理\n  },\n  data() {\n    return {\n      dataChange: this.pageChange,\n      dataCurrent: this.pageCurrent\n    }\n  }\n}\n&lt;/script&gt;</code></pre><p>dataメソッドを用意して、オブジェクトを作成します。その際にオブジェクトのkey（dataChange）とvalueは（pageChange）は、別名を定義しないと以下のエラーが出ます。</p>\n<pre><code>directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: &quot;pageChange&quot;\n</code></pre>\n<h1>index.vue</h1>\n<p>次にページネーションを表示させるページです。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;v-app&gt;\n    &lt;span\n      v-for=&quot;content in contents&quot;\n      :key=&quot;content.id&quot;\n    &gt;\n      {{content.title}}\n    &lt;/span&gt;\n    &lt;PagiNation\n      :pageCurrent=&quot;pageCurrent&quot;\n      :pageLength=&quot;pageLength&quot;\n      :pageChange=&quot;pageChange&quot;\n    /&gt;\n  &lt;/v-app&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport PagiNation from &#x27;@/components/PagiNation.vue&#x27;\nexport default {\n  components: {\n    PagiNation\n  },\n  data() {\n    return {\n      pageCurrent: 1, // 初期表示は1から始める\n      pageLength: 0,\n      maxCount: 3\n    }\n  },\n  asyncData(context) {\n    let contents = [\n      { id: 0, title: &#x27;hoge0&#x27;},\n      { id: 1, title: &#x27;hoge1&#x27;},\n      { id: 2, title: &#x27;hoge2&#x27;},\n      { id: 3, title: &#x27;hoge3&#x27;},\n      { id: 4, title: &#x27;hoge4&#x27;},\n      { id: 5, title: &#x27;hoge5&#x27;}\n    ]\n    // ページ内に表示する最大コンテンツ数\n    const MAX_COUNT = 3\n    // 全体のページ数を取得\n    const pageLength = Math.ceil(contents.length / MAX_COUNT)\n    // ページング処理に使うため、全てのコンテンツ情報を保持\n    const contentsAll = contents\n\n    return {\n      contents,\n      pageLength,\n      contentsAll\n    }\n  },\n  methods: {\n    pageChange( pageNumber ) {\n      this.contents = this.contentsAll\n      const startCount = pageNumber === 1 ? 0 : ( pageNumber - 1 ) * this.maxCount\n      const endCount = pageNumber * this.maxCount\n      this.contents = this.contents.slice( startCount, endCount )\n    }\n  },\n  mounted() {\n    // Vueの要素がマウントされた後、最初のコンテンツの表示を確定させる処理\n    this.contents = this.contents.slice( 0, this.maxCount )\n  }\n}\n&lt;/script&gt;</code></pre><p>thisはVueの要素にマウントしてからでないと使えないため、asyncData内にthisを定義する事ができません（undefinedになります）そのため、asyncData内の変数maxCountはthisを使わずに定義しています。</p>\n",
  "dir": "posts/json",
  "base": "20200428.json",
  "ext": ".json",
  "sourceBase": "20200428.md",
  "sourceExt": ".md"
}